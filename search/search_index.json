{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Formr Formr enables you to easily build, layout, and validate your PHP forms without all the complicated, messy overhead. If you find Formr useful, please consider starring the project and making a donation . Thank you! Features Create complex forms with server-side processing and validation in only seconds. Automatically wrap all of your form elements and messages in Bootstrap or Bulma classes. Instantly make one field required, all fields required, or all but one field required. Built-in validation rules, including email, comparisons, slugging, and hashing. Automatically build and format < label > tags, saving lots of time. Create and validate radio groups and checkbox arrays in seconds. Extensible: create your own reusable field element wrappers, dropdown menus, and forms. Upload images: resize, rename, and create thumbnails. Send plain text and HTML emails. Generate CSRF tokens and set the expiration time. Object-oriented; supports multiple forms per page. Little helpers to assist in building, layout, testing and debugging. And a ton of other cool stuff! Installation Composer Run the following command to install Formr with Composer. composer require formr/formr Then include the autoload.php file and create a new form object. require_once 'vendor/autoload.php' ; $form = new Formr\\Formr (); Download Download the .zip file and place the Formr folder in your project, then include the Formr class and create a new form object. require_once 'Formr/class.formr.php' ; $form = new Formr\\Formr (); Frameworks Formr has support for the Bootstrap and Bulma frameworks right out of the box. Just tell Formr which one you want to use when creating a new form and Formr will take care of the rest! $form = new Formr\\Formr ( 'bulma' ); $form = new Formr\\Formr ( 'bootstrap' ); $form = new Formr\\Formr ( 'bootstrap3' ); Quick Start 1. Create the Form To use Formr you will need to create a new form object. You can name it anything you like, so let's keep it simple and call it $form . $form = new Formr\\Formr (); There are two arguments we can pass to our new form: the Wrapper, and the Silencer. The Wrapper tells Formr how you want your forms to be laid out; such as with Bootstrap, Bulma, or just a simple <div> tag. $form = new Formr\\Formr ( 'bootstrap' ); Formr will automatically echo form elements and messages to the screen, and this is usually fine. However, in some instances - such as when using a templating framework - this is not an option. In these cases simply pass the word hush and then manually echo your elements and messages. $form = new Formr\\Formr ( 'bootstrap' , 'hush' ); 2. Build the Form To build a form, simply enter your form labels as a comma separated string and Formr will build it, complete with opening and closing tags, a submit button, and email validation; plus all form values are retained upon $_POST . Note All field elements default to < input type = \"text\" > , however you can easily specify another type by adding a pipe character and then the element type. Example require_once 'vendor/autoload.php' ; $form = new Formr\\Formr ( 'bootstrap' ); $form -> create_form ( 'Name, Email, Comments|textarea' ); Produces the following HTML < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < div id = \"_name\" class = \"form-group\" > < label class = \"control-label\" for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"form-control\" > </ div > < div id = \"_email\" class = \"form-group\" > < label class = \"control-label\" for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" class = \"form-control\" > </ div > < div id = \"_comments\" class = \"form-group\" > < label class = \"control-label\" for = \"comments\" > Comments </ label > < textarea name = \"comments\" id = \"comments\" class = \"form-control\" ></ textarea > </ div > < div id = \"_button\" class = \"form-group\" > < label class = \"sr-only\" for = \"button\" ></ label > < button type = \"submit\" name = \"button\" id = \"button\" class = \"btn btn-primary\" > Submit </ button > </ div > </ form > 3. Get the Values After the form has been submitted we need to get its values from PHP's $_POST array. To do this, just enter the form labels into the validate () method and assign it to a variable. $data = $form -> validate ( 'Name, Email, Comments' ); Full Example Copy and paste the following code into a new .php document and see just how fast and easy Formr really is. A Full Contact Form using Bulma <? php // include Formr require_once 'vendor/autoload.php' ; // create our form object and use Bulma as our form wrapper $form = new Formr\\Formr ( 'bulma' ); // make all fields required $form -> required = '*' ; // check if the form has been submitted if ( $form -> submitted ()) { // get our form values and assign them to a variable $data = $form -> validate ( 'Name, Email, Comments' ); // show a success message if no errors if ( $form -> ok ()) { $form -> success_message = \"Thank you, { $data [ 'name' ] } !\" ; } } ?> <!DOCTYPE html> <html lang=\"en\"> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css\"> <body class=\"container\"> <?php $form -> messages (); ?> <?php $form -> create_form ( 'Name, Email, Comments|textarea' ); ?> </body> </html>","title":"Home"},{"location":"#formr","text":"Formr enables you to easily build, layout, and validate your PHP forms without all the complicated, messy overhead. If you find Formr useful, please consider starring the project and making a donation . Thank you!","title":"Formr"},{"location":"#features","text":"Create complex forms with server-side processing and validation in only seconds. Automatically wrap all of your form elements and messages in Bootstrap or Bulma classes. Instantly make one field required, all fields required, or all but one field required. Built-in validation rules, including email, comparisons, slugging, and hashing. Automatically build and format < label > tags, saving lots of time. Create and validate radio groups and checkbox arrays in seconds. Extensible: create your own reusable field element wrappers, dropdown menus, and forms. Upload images: resize, rename, and create thumbnails. Send plain text and HTML emails. Generate CSRF tokens and set the expiration time. Object-oriented; supports multiple forms per page. Little helpers to assist in building, layout, testing and debugging. And a ton of other cool stuff!","title":"Features"},{"location":"#installation","text":"","title":"Installation"},{"location":"#composer","text":"Run the following command to install Formr with Composer. composer require formr/formr Then include the autoload.php file and create a new form object. require_once 'vendor/autoload.php' ; $form = new Formr\\Formr ();","title":"Composer"},{"location":"#download","text":"Download the .zip file and place the Formr folder in your project, then include the Formr class and create a new form object. require_once 'Formr/class.formr.php' ; $form = new Formr\\Formr ();","title":"Download"},{"location":"#frameworks","text":"Formr has support for the Bootstrap and Bulma frameworks right out of the box. Just tell Formr which one you want to use when creating a new form and Formr will take care of the rest! $form = new Formr\\Formr ( 'bulma' ); $form = new Formr\\Formr ( 'bootstrap' ); $form = new Formr\\Formr ( 'bootstrap3' );","title":"Frameworks"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#1-create-the-form","text":"To use Formr you will need to create a new form object. You can name it anything you like, so let's keep it simple and call it $form . $form = new Formr\\Formr (); There are two arguments we can pass to our new form: the Wrapper, and the Silencer. The Wrapper tells Formr how you want your forms to be laid out; such as with Bootstrap, Bulma, or just a simple <div> tag. $form = new Formr\\Formr ( 'bootstrap' ); Formr will automatically echo form elements and messages to the screen, and this is usually fine. However, in some instances - such as when using a templating framework - this is not an option. In these cases simply pass the word hush and then manually echo your elements and messages. $form = new Formr\\Formr ( 'bootstrap' , 'hush' );","title":"1. Create the Form"},{"location":"#2-build-the-form","text":"To build a form, simply enter your form labels as a comma separated string and Formr will build it, complete with opening and closing tags, a submit button, and email validation; plus all form values are retained upon $_POST . Note All field elements default to < input type = \"text\" > , however you can easily specify another type by adding a pipe character and then the element type. Example require_once 'vendor/autoload.php' ; $form = new Formr\\Formr ( 'bootstrap' ); $form -> create_form ( 'Name, Email, Comments|textarea' ); Produces the following HTML < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < div id = \"_name\" class = \"form-group\" > < label class = \"control-label\" for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"form-control\" > </ div > < div id = \"_email\" class = \"form-group\" > < label class = \"control-label\" for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" class = \"form-control\" > </ div > < div id = \"_comments\" class = \"form-group\" > < label class = \"control-label\" for = \"comments\" > Comments </ label > < textarea name = \"comments\" id = \"comments\" class = \"form-control\" ></ textarea > </ div > < div id = \"_button\" class = \"form-group\" > < label class = \"sr-only\" for = \"button\" ></ label > < button type = \"submit\" name = \"button\" id = \"button\" class = \"btn btn-primary\" > Submit </ button > </ div > </ form >","title":"2. Build the Form"},{"location":"#3-get-the-values","text":"After the form has been submitted we need to get its values from PHP's $_POST array. To do this, just enter the form labels into the validate () method and assign it to a variable. $data = $form -> validate ( 'Name, Email, Comments' );","title":"3. Get the Values"},{"location":"#full-example","text":"Copy and paste the following code into a new .php document and see just how fast and easy Formr really is. A Full Contact Form using Bulma <? php // include Formr require_once 'vendor/autoload.php' ; // create our form object and use Bulma as our form wrapper $form = new Formr\\Formr ( 'bulma' ); // make all fields required $form -> required = '*' ; // check if the form has been submitted if ( $form -> submitted ()) { // get our form values and assign them to a variable $data = $form -> validate ( 'Name, Email, Comments' ); // show a success message if no errors if ( $form -> ok ()) { $form -> success_message = \"Thank you, { $data [ 'name' ] } !\" ; } } ?> <!DOCTYPE html> <html lang=\"en\"> <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css\"> <body class=\"container\"> <?php $form -> messages (); ?> <?php $form -> create_form ( 'Name, Email, Comments|textarea' ); ?> </body> </html>","title":"Full Example"},{"location":"blog/","text":"Formr for Designers Formr is a PHP micro framework which allows developers to easily build forms; but what if you\u2019re not a PHP developer? What if you don\u2019t even know PHP? No problem, Formr has you covered! FastForm in the Real World One of my favority things about Formr is the ability to save form + validation sets for reuse. I can't even count the number of times I\u2019ve had to create a registration form and all I had to type was...","title":"Blog"},{"location":"blog/#formr-for-designers","text":"Formr is a PHP micro framework which allows developers to easily build forms; but what if you\u2019re not a PHP developer? What if you don\u2019t even know PHP? No problem, Formr has you covered!","title":"Formr for Designers"},{"location":"blog/#fastform-in-the-real-world","text":"One of my favority things about Formr is the ability to save form + validation sets for reuse. I can't even count the number of times I\u2019ve had to create a registration form and all I had to type was...","title":"FastForm in the Real World"},{"location":"fastform/","text":"FastForm FastForm allows you to create and validate complex forms in mere seconds. It was designed so you can build a form/validation set, and then reuse it over and over again, which enables you to drop a form - no matter how large - into your project in only seconds. This is accomplished by creating your FastForm with arrays, and then passing the name of the form into the fastform () and fastpost () methods. Let's check out how you would display one of Formr's default FastForms: login . Displaying the login FastForm $form -> fastform ( 'login' ); Produces the following HTML < form action = \"/index.php\" id = \"login\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div class = \"div\" > < input type = \"text\" name = \"username\" id = \"username\" class = \"input\" placeholder = \"username\" > </ div > < div class = \"div\" > < input type = \"password\" name = \"password\" id = \"password\" class = \"input\" autocorrect = \"off\" autocapitalize = \"off\" placeholder = \"password\" > </ div > < input type = \"submit\" name = \"submit\" value = \"Login\" id = \"submit\" class = \"button\" > </ fieldset > </ form > And here's how to retrieve and validate the form's values, and assign them to variables. Validating the login FastForm $data = $form -> fastpost ( 'login' ); $username = $data [ 'username' ]; $password = $data [ 'password' ]; Let's Build a FastForm Before we can start passing strings to the fastform () method, we need to understand how FastForms are built. Creating a FastForm is really easy: just create an array and fill it with field element types as the key, and element attributes as the value. The attribute values follow the same rules as the post () method. We can then pass the array directly to the fastform () method. Building a FastForm Form Array $array = [ 'text' => 'name,Name,John Wick' , 'email' => 'email,Email,johnwick@gunfu.com' , 'textarea' => 'comments,Comments' ]; $form -> fastform ( $array ); Produces the following HTML <form action=\"/index.php\" id=\"\" method=\"post\" accept-charset=\"utf-8\"> <fieldset> <div class=\"div\"> <label for=\"\">Name</label> <input type=\"text\" name=\"name\" value=\"John Wick\" id=\"name\" class=\"input\"> </div> <div class=\"div\"> <label for=\"\">Email</label> <input type=\"email\" name=\"email\" value=\"johnwick@gunfu.com\" id=\"email\" class=\"input\"> </div> <div class=\"div\"> <label for=\"\">Comments</label> <textarea name=\"comments\" id=\"comments\" class=\"input\" ></textarea> </div> <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\" class=\"button\"> </fieldset> </form> Danger Each key must be uniquely named or the fields will overwrite each other. You can name the keys anything you like, as long as the field's input type is written first. A More Complex FastForm Form Array $data = [ 'text' => 'fname,First name:,,fname' , 'text2' => 'lname,Last name:,,lname' , 'email' => 'email,Email:,,email' , 'text3' => 'city,City:,,city' , 'select' => 'state,State:,,state,,,,state' , 'text4' => 'zip,Zip/Postal Code:,,zip' , 'select2' => 'country,Country:,,country,,,US,country' , 'label' => 'sex,What sex are you?' , 'radioM' => 'sex,Male,male,male' , 'radioF' => 'sex,Female,female,female' , 'textarea' => 'comments,Comments:,,comments' ]; $form -> fastform ( $data ); Produces the following HTML (using Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_fname\" class = \"form-group\" > < label class = control-label for = \"fname\" > First name: </ label > < input type = \"text\" name = \"fname\" id = \"fname\" class = \"form-control\" > </ div > < div id = \"_lname\" class = \"form-group\" > < label class = control-label for = \"lname\" > Last name: </ label > < input type = \"text\" name = \"lname\" id = \"lname\" class = \"form-control\" > </ div > < div id = \"_email\" class = \"form-group\" > < label class = control-label for = \"email\" > Email: </ label > < input type = \"email\" name = \"email\" id = \"email\" autocorrect = \"off\" autocapitalize = \"off\" class = \"form-control\" > </ div > < div id = \"_city\" class = \"form-group\" > < label class = control-label for = \"city\" > City: </ label > < input type = \"text\" name = \"city\" id = \"city\" class = \"form-control\" > </ div > < div id = \"_state\" class = \"form-group\" > < label class = control-label for = \"state\" > State: </ label > < select name = \"state\" id = \"state\" class = \"form-control\" > < option value = \"\" selected = \"selected\" > Select a State... </ option > < option value = \"AL\" > Alabama </ option > < option value = \"AK\" > Alaska </ option > < option value = \"AZ\" > Arizona </ option > ... < option value = \"WI\" > Wisconsin </ option > < option value = \"WY\" > Wyoming </ option > </ select > </ div > < div id = \"_zip\" class = \"form-group\" > < label class = control-label for = \"zip\" > Zip/Postal Code: </ label > < input type = \"text\" name = \"zip\" id = \"zip\" class = \"form-control\" > </ div > < div id = \"_country\" class = \"form-group\" > < label class = control-label for = \"country\" > Country: </ label > < select name = \"country\" id = \"country\" class = \"form-control\" > < option value = \"\" > Select a Country... </ option > < option value = \"US\" selected = \"selected\" > United States </ option > < option value = \"CA\" > Canada </ option > < option value = \"GB\" > United Kingdom </ option > < option value = \" \" > --------------- </ option > < option value = \"AF\" > Afghanistan </ option > < option value = \"AL\" > Albania </ option > ... < option value = \"ZM\" > Zambia </ option > < option value = \"ZW\" > Zimbabwe </ option > </ select > </ div > < label for = \"sex\" > What sex are you? </ label > < div id = \"_sex\" class = \"radio\" > < label for = \"male\" >< input type = \"radio\" name = \"sex\" value = \"male\" id = \"male\" > Male </ label > </ div > < div id = \"_sex\" class = \"radio\" > < label for = \"female\" >< input type = \"radio\" name = \"sex\" value = \"female\" id = \"female\" > Female </ label > </ div > < div id = \"_comments\" class = \"form-group\" > < label class = control-label for = \"comments\" > Comments: </ label > < textarea name = \"comments\" id = \"comments\" class = \"form-control\" ></ textarea > </ div > < div id = \"_submit\" class = \"form-group\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"btn\" > </ div > </ fieldset > </ form > Info Notice how we specified our state and country drop-downs by using the strings state and country in the eighth paramater instead of creating and adding an array full of options? Adding a string instead of an array tells Formr to look for that drop-down menu in the Dropdowns class, which is located at lib/class.formr.dropdowns.php . Tip If you need to use a comma in a string, just enter its ASCII or HTML equivalent &#44; . Multidimensional Arrays As you saw in the previous example, you can add radios, checkboxes and drop-downs using strings. While this is incredibly fast, it\u2019s also somewhat limited, so FastForm will allow you to build your forms with multidimensional arrays as well. Building with Multidimensional Arrays // build an array with our t-shirt sizes... $shirts = [ 'large' => 'Large' , 'medium' => 'Medium' , 'small' => 'Small' ]; // now we build our drop-down menu and add the t-shirt array as our list of options $data = [ 'select' => [ 'name' => 'shirts' , 'label' => 'Shirts:' , 'options' => $shirts , 'selected' => 'small' ] ]; $form -> fastform ( $data ); Produces the following HTML (with Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_shirts\" class = \"form-group\" > < label class = control-label for = \"shirts\" > Shirts: </ label > < select name = \"shirts\" id = \"shirts\" class = \"form-control\" > < option value = \"large\" > Large </ option > < option value = \"medium\" > Medium </ option > < option value = \"small\" selected = \"selected\" > Small </ option > </ select > </ div > < div id = \"_submit\" class = \"form-group\" > < input name = \"submit\" type = \"submit\" id = \"submit\" value = \"Submit\" class = \"btn\" > </ div > </ fieldset > </ form > Radio Groups & Checkbox Arrays You can build a checkbox array or radio group by adding a label and as many elements as you like, however, there is an easier way: just put all of your element names in the array's value parameter, separate them with a pipe and wrap them with square brackets. Easy Radio Groups $data = [ 'radio' => 'food,Favorite food:,[steak|chicken|fish],food' ]; $form -> fastform ( $data ); Produces the following HTML (with Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_food\" class = \"form-group\" > < label class = \"control-label\" > Favorite food: </ label > < div class = \"radio\" > < label for = \"steak\" > < input type = \"radio\" name = \"food\" value = \"steak\" id = \"steak\" > Steak </ label > </ div > < div class = \"radio\" > < label for = \"chicken\" > < input type = \"radio\" name = \"food\" value = \"chicken\" id = \"chicken\" > Chicken </ label > </ div > < div class = \"radio\" > < label for = \"fish\" > < input type = \"radio\" name = \"food\" value = \"fish\" id = \"fish\" > Fish </ label > </ div > </ div > < div id = \"_submit\" class = \"form-group\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"btn\" > </ div > </ fieldset > </ form > Easy Checkbox Arrays $data = [ 'checkbox' => 'genres[],Favorite genres:,[rock|funk|rap],genres' ]; Warning Since radio elements are usually grouped, a \"required field\" indicator such as an asterisk * will not be placed next to a required field for each radio element in that group. Adding a < label > for the group (as in the previous example) will give you an * indicating that the entire group is required. Retrieving The Form Values FastForm wasn't designed to only create forms, it was also designed to validate them just as easily using the fastpost () method. Example $form -> pastpost ( 'login' ); You build the validation the same as you build the form: with arrays. Example $rules = [ 'username' => [ 'Username' , 'required|min[3]|max[16]|slug' ], 'password' => [ 'Password' , 'required|hash' ] ]; $data = $form -> fastpost ( $rules ); Putting it All Together Now that you know how to build the forms and validation sets, let's see how we can put them together and make a FastForm! Head over to the Formr Extend repo and install the my_classes folder into your Formr folder. Open my_classes/my.forms.php and take a look at the my_login method. This is basically what we used earlier, but now it's in our own personal plugin class. Go to your form page and create a new FastForm, then drop in the fastform () and fastpost () methods with our newly available custom FastForm. Using the my_login FastForm <!DOCTYPE html> < body > <? php $form = new Formr (); if ( $form -> submitted ()) { // validate the $_POST data $post = $form -> fastpost ( 'my_login' ); $username = $post [ 'username' ]; $password = $post [ 'password' ]; } // print the form $form -> fastform ( 'my_login' ); ?> </ body > </ html > And for the Truly Lazy\u2026 There\u2019s fastpost ( 'POST' ) . Using FastForm in this manner will return an array of the key/value pairs from the $_POST array, plus perform some basic validation based upon the field names. For instance, if the field name is email Formr will automatically run the valid_email validation rule on it. The list of validation rules can be found in the Validation docs. Just Grab Everything From $_POST // puts all of our POST key/values into an array named $post $post = $form -> fastpost ( 'POST' ); // then just create variables based upon your form's field names $fname = $post [ 'fname' ]; $lname = $post [ 'lname' ];","title":"FastForm"},{"location":"fastform/#fastform","text":"FastForm allows you to create and validate complex forms in mere seconds. It was designed so you can build a form/validation set, and then reuse it over and over again, which enables you to drop a form - no matter how large - into your project in only seconds. This is accomplished by creating your FastForm with arrays, and then passing the name of the form into the fastform () and fastpost () methods. Let's check out how you would display one of Formr's default FastForms: login . Displaying the login FastForm $form -> fastform ( 'login' ); Produces the following HTML < form action = \"/index.php\" id = \"login\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div class = \"div\" > < input type = \"text\" name = \"username\" id = \"username\" class = \"input\" placeholder = \"username\" > </ div > < div class = \"div\" > < input type = \"password\" name = \"password\" id = \"password\" class = \"input\" autocorrect = \"off\" autocapitalize = \"off\" placeholder = \"password\" > </ div > < input type = \"submit\" name = \"submit\" value = \"Login\" id = \"submit\" class = \"button\" > </ fieldset > </ form > And here's how to retrieve and validate the form's values, and assign them to variables. Validating the login FastForm $data = $form -> fastpost ( 'login' ); $username = $data [ 'username' ]; $password = $data [ 'password' ];","title":"FastForm"},{"location":"fastform/#lets-build-a-fastform","text":"Before we can start passing strings to the fastform () method, we need to understand how FastForms are built. Creating a FastForm is really easy: just create an array and fill it with field element types as the key, and element attributes as the value. The attribute values follow the same rules as the post () method. We can then pass the array directly to the fastform () method. Building a FastForm Form Array $array = [ 'text' => 'name,Name,John Wick' , 'email' => 'email,Email,johnwick@gunfu.com' , 'textarea' => 'comments,Comments' ]; $form -> fastform ( $array ); Produces the following HTML <form action=\"/index.php\" id=\"\" method=\"post\" accept-charset=\"utf-8\"> <fieldset> <div class=\"div\"> <label for=\"\">Name</label> <input type=\"text\" name=\"name\" value=\"John Wick\" id=\"name\" class=\"input\"> </div> <div class=\"div\"> <label for=\"\">Email</label> <input type=\"email\" name=\"email\" value=\"johnwick@gunfu.com\" id=\"email\" class=\"input\"> </div> <div class=\"div\"> <label for=\"\">Comments</label> <textarea name=\"comments\" id=\"comments\" class=\"input\" ></textarea> </div> <input type=\"submit\" name=\"submit\" value=\"Submit\" id=\"submit\" class=\"button\"> </fieldset> </form> Danger Each key must be uniquely named or the fields will overwrite each other. You can name the keys anything you like, as long as the field's input type is written first. A More Complex FastForm Form Array $data = [ 'text' => 'fname,First name:,,fname' , 'text2' => 'lname,Last name:,,lname' , 'email' => 'email,Email:,,email' , 'text3' => 'city,City:,,city' , 'select' => 'state,State:,,state,,,,state' , 'text4' => 'zip,Zip/Postal Code:,,zip' , 'select2' => 'country,Country:,,country,,,US,country' , 'label' => 'sex,What sex are you?' , 'radioM' => 'sex,Male,male,male' , 'radioF' => 'sex,Female,female,female' , 'textarea' => 'comments,Comments:,,comments' ]; $form -> fastform ( $data ); Produces the following HTML (using Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_fname\" class = \"form-group\" > < label class = control-label for = \"fname\" > First name: </ label > < input type = \"text\" name = \"fname\" id = \"fname\" class = \"form-control\" > </ div > < div id = \"_lname\" class = \"form-group\" > < label class = control-label for = \"lname\" > Last name: </ label > < input type = \"text\" name = \"lname\" id = \"lname\" class = \"form-control\" > </ div > < div id = \"_email\" class = \"form-group\" > < label class = control-label for = \"email\" > Email: </ label > < input type = \"email\" name = \"email\" id = \"email\" autocorrect = \"off\" autocapitalize = \"off\" class = \"form-control\" > </ div > < div id = \"_city\" class = \"form-group\" > < label class = control-label for = \"city\" > City: </ label > < input type = \"text\" name = \"city\" id = \"city\" class = \"form-control\" > </ div > < div id = \"_state\" class = \"form-group\" > < label class = control-label for = \"state\" > State: </ label > < select name = \"state\" id = \"state\" class = \"form-control\" > < option value = \"\" selected = \"selected\" > Select a State... </ option > < option value = \"AL\" > Alabama </ option > < option value = \"AK\" > Alaska </ option > < option value = \"AZ\" > Arizona </ option > ... < option value = \"WI\" > Wisconsin </ option > < option value = \"WY\" > Wyoming </ option > </ select > </ div > < div id = \"_zip\" class = \"form-group\" > < label class = control-label for = \"zip\" > Zip/Postal Code: </ label > < input type = \"text\" name = \"zip\" id = \"zip\" class = \"form-control\" > </ div > < div id = \"_country\" class = \"form-group\" > < label class = control-label for = \"country\" > Country: </ label > < select name = \"country\" id = \"country\" class = \"form-control\" > < option value = \"\" > Select a Country... </ option > < option value = \"US\" selected = \"selected\" > United States </ option > < option value = \"CA\" > Canada </ option > < option value = \"GB\" > United Kingdom </ option > < option value = \" \" > --------------- </ option > < option value = \"AF\" > Afghanistan </ option > < option value = \"AL\" > Albania </ option > ... < option value = \"ZM\" > Zambia </ option > < option value = \"ZW\" > Zimbabwe </ option > </ select > </ div > < label for = \"sex\" > What sex are you? </ label > < div id = \"_sex\" class = \"radio\" > < label for = \"male\" >< input type = \"radio\" name = \"sex\" value = \"male\" id = \"male\" > Male </ label > </ div > < div id = \"_sex\" class = \"radio\" > < label for = \"female\" >< input type = \"radio\" name = \"sex\" value = \"female\" id = \"female\" > Female </ label > </ div > < div id = \"_comments\" class = \"form-group\" > < label class = control-label for = \"comments\" > Comments: </ label > < textarea name = \"comments\" id = \"comments\" class = \"form-control\" ></ textarea > </ div > < div id = \"_submit\" class = \"form-group\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"btn\" > </ div > </ fieldset > </ form > Info Notice how we specified our state and country drop-downs by using the strings state and country in the eighth paramater instead of creating and adding an array full of options? Adding a string instead of an array tells Formr to look for that drop-down menu in the Dropdowns class, which is located at lib/class.formr.dropdowns.php . Tip If you need to use a comma in a string, just enter its ASCII or HTML equivalent &#44; .","title":"Let's Build a FastForm"},{"location":"fastform/#multidimensional-arrays","text":"As you saw in the previous example, you can add radios, checkboxes and drop-downs using strings. While this is incredibly fast, it\u2019s also somewhat limited, so FastForm will allow you to build your forms with multidimensional arrays as well. Building with Multidimensional Arrays // build an array with our t-shirt sizes... $shirts = [ 'large' => 'Large' , 'medium' => 'Medium' , 'small' => 'Small' ]; // now we build our drop-down menu and add the t-shirt array as our list of options $data = [ 'select' => [ 'name' => 'shirts' , 'label' => 'Shirts:' , 'options' => $shirts , 'selected' => 'small' ] ]; $form -> fastform ( $data ); Produces the following HTML (with Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_shirts\" class = \"form-group\" > < label class = control-label for = \"shirts\" > Shirts: </ label > < select name = \"shirts\" id = \"shirts\" class = \"form-control\" > < option value = \"large\" > Large </ option > < option value = \"medium\" > Medium </ option > < option value = \"small\" selected = \"selected\" > Small </ option > </ select > </ div > < div id = \"_submit\" class = \"form-group\" > < input name = \"submit\" type = \"submit\" id = \"submit\" value = \"Submit\" class = \"btn\" > </ div > </ fieldset > </ form >","title":"Multidimensional Arrays"},{"location":"fastform/#radio-groups-checkbox-arrays","text":"You can build a checkbox array or radio group by adding a label and as many elements as you like, however, there is an easier way: just put all of your element names in the array's value parameter, separate them with a pipe and wrap them with square brackets. Easy Radio Groups $data = [ 'radio' => 'food,Favorite food:,[steak|chicken|fish],food' ]; $form -> fastform ( $data ); Produces the following HTML (with Bootstrap as our Wrapper) < form action = \"/index.php\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < div id = \"_food\" class = \"form-group\" > < label class = \"control-label\" > Favorite food: </ label > < div class = \"radio\" > < label for = \"steak\" > < input type = \"radio\" name = \"food\" value = \"steak\" id = \"steak\" > Steak </ label > </ div > < div class = \"radio\" > < label for = \"chicken\" > < input type = \"radio\" name = \"food\" value = \"chicken\" id = \"chicken\" > Chicken </ label > </ div > < div class = \"radio\" > < label for = \"fish\" > < input type = \"radio\" name = \"food\" value = \"fish\" id = \"fish\" > Fish </ label > </ div > </ div > < div id = \"_submit\" class = \"form-group\" > < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"btn\" > </ div > </ fieldset > </ form > Easy Checkbox Arrays $data = [ 'checkbox' => 'genres[],Favorite genres:,[rock|funk|rap],genres' ]; Warning Since radio elements are usually grouped, a \"required field\" indicator such as an asterisk * will not be placed next to a required field for each radio element in that group. Adding a < label > for the group (as in the previous example) will give you an * indicating that the entire group is required.","title":"Radio Groups &amp; Checkbox Arrays"},{"location":"fastform/#retrieving-the-form-values","text":"FastForm wasn't designed to only create forms, it was also designed to validate them just as easily using the fastpost () method. Example $form -> pastpost ( 'login' ); You build the validation the same as you build the form: with arrays. Example $rules = [ 'username' => [ 'Username' , 'required|min[3]|max[16]|slug' ], 'password' => [ 'Password' , 'required|hash' ] ]; $data = $form -> fastpost ( $rules );","title":"Retrieving The Form Values"},{"location":"fastform/#putting-it-all-together","text":"Now that you know how to build the forms and validation sets, let's see how we can put them together and make a FastForm! Head over to the Formr Extend repo and install the my_classes folder into your Formr folder. Open my_classes/my.forms.php and take a look at the my_login method. This is basically what we used earlier, but now it's in our own personal plugin class. Go to your form page and create a new FastForm, then drop in the fastform () and fastpost () methods with our newly available custom FastForm. Using the my_login FastForm <!DOCTYPE html> < body > <? php $form = new Formr (); if ( $form -> submitted ()) { // validate the $_POST data $post = $form -> fastpost ( 'my_login' ); $username = $post [ 'username' ]; $password = $post [ 'password' ]; } // print the form $form -> fastform ( 'my_login' ); ?> </ body > </ html >","title":"Putting it All Together"},{"location":"fastform/#and-for-the-truly-lazy","text":"There\u2019s fastpost ( 'POST' ) . Using FastForm in this manner will return an array of the key/value pairs from the $_POST array, plus perform some basic validation based upon the field names. For instance, if the field name is email Formr will automatically run the valid_email validation rule on it. The list of validation rules can be found in the Validation docs. Just Grab Everything From $_POST // puts all of our POST key/values into an array named $post $post = $form -> fastpost ( 'POST' ); // then just create variables based upon your form's field names $fname = $post [ 'fname' ]; $lname = $post [ 'lname' ];","title":"And for the Truly Lazy\u2026"},{"location":"methods/","text":"Methods This document contains a list of Formr's public methods, grouped by functionality. Form Builders create_form This method allows you to create a form by entering the form's label text. The only parameter contains a comma separated string of your form's labels and is required. Build a basic form $form -> create_form ( 'Name, Email' ); Produces the following HTML < form action = \"/index.php\" id = \"myForm\" method = \"post\" accept-charset = \"utf-8\" > < label for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"input\" > < label for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" class = \"input\" > < button type = \"submit\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > </ form > The default behavior is to create each form element as < input type = \"text\" > . If you want to specify an element type, just add a pipe character and the type of element you want to use. Specify input types $form -> create_form ( 'Name, Comments|textarea' ); Produces the following HTML < form action = \"/index.php\" id = \"myForm\" method = \"post\" accept-charset = \"utf-8\" > < label for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"input\" > < label for = \"comments\" > Comments </ label > < textarea name = \"comments\" id = \"comments\" class = \"input\" ></ textarea > < button type = \"submit\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > </ form > Tip Formr will create an < input type = \"email\" > element if your label text contains the word email . create_form_multipart Identical to create_form () except that it adds the < form enctype = \"multipart/form-data\" > attribute. create Identical to create_form () except that it omits the < form ></ form > tags and submit button. Warning The create () , create_form () , and create_form_multipart () form building methods are meant for rapid creation of basic forms, so they won't fully support all input element types, such as select , checkbox , or radio . If you require those elements, consider using fastform () , or build the form element-by-element. fastform This method allows you to build incredibly complex forms using simple key/value arrays and strings. Read the FastForm docs for complete examples. Validate with the fastpost () method; The first parameter contains the array (or string) and is required. If you'd like to add CSRF protection, just enter CSRF or TRUE in the second parameter. Example $form -> fastform ( 'login' ); Produces the following HTML < form action = \"/index.php\" id = \"login\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < input type = \"text\" name = \"username\" id = \"username\" class = \"input\" placeholder = \"username\" > < input type = \"password\" name = \"password\" id = \"password\" class = \"input\" autocorrect = \"off\" autocapitalize = \"off\" placeholder = \"password\" > < input type = \"submit\" name = \"submit\" value = \"Login\" id = \"submit\" class = \"button\" > </ fieldset > </ form > fastform_multipart Identical to fastform () except that it adds the < form enctype = \"multipart/form-data\" > attribute. Warning When using CSRF protection you must enable sessions by adding session_start () at the top of your file. Form Processors validate This method allows you to retrieve and validate a form's values by entering only the form's label text. Read the Validate Form docs for complete examples. The only parameter contains a comma separated string of your form's labels and is required. Validate a basic form $form -> validate ( 'Name, Email, Comments' ); All form values are put into an array, so it's really easy to retrieve them. Retrieve values $data = $form -> validate ( 'Name, Email, Comments' ); $name = $data [ 'name' ]; $email = $data [ 'email' ]; $comments = $data [ 'comments' ]; You can add validation rules to each field by wrapping them in parenthesis. Each rule must be separated by a pipe character. If a field is named Email it will automatically have the valid_email rule applied. Validate values $form -> validate ( 'Name(min[2]|max[60]), Email, Comments(min[5])' ); post This method allows you to retrieve and validate a form's values with much more control and fine-tuning then the validate () method. The first required parameter is the form field's name. The optional second parameter contains a human readable field name and custom error message. The optional third parameter contains validation rules. Basic example $name = $form -> post ( 'name' ); Make sure a valid email address is posted $email = $form -> post ( 'email' , 'Email' , 'valid_email' ); Password is not less than 6 characters and not more than 20 $password = $form -> post ( 'password' , 'Password' , 'min[6]|max[20]' ); Create a custom error message $email = $form -> post ( 'email' , 'Email|Enter your email address' , 'valid_email' ); Info The form data is passed through PHP's trim () and strip_tags () functions for basic sanitation. If you want to allow HTML in your forms, just add the allow_html validation rule in the third parameter and only trim () will be applied to the input. get Identical to post () except that it retrieves values via PHP's $_GET array. fastpost This method will return an array of key/value pairs, and perform validation. Read the FastForm docs for complete examples. Use with the fastform () method. The only parameter contains an array, or the form name as a string, and is required. Example <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); if ( $form -> submitted ()) { $data = $form -> fastpost ( 'login' ); $username = $data [ 'username' ]; $password = $data [ 'password' ]; } ?> <!DOCTYPE html> <html lang=\"en\"> <body> <div class=\"container\"> <?php $form -> fastform ( 'login' ); ?> </div> </body> </html> redirect This method lets you redirect to another URL after the form has been submitted. The only parameter contains the redirection URL and is required. Example if ( $form -> submitted ()) { $form -> redirect ( 'https://mysite.com/thankyou' ); } submitted The submitted () method checks to see if the form has been submitted or not. It does this by checking the $_SERVER [ 'REQUEST_METHOD' ] for POST . Example if ( $form -> submitted ()){ // form is submitted via POST } Form Tags open Creates a standard < form > tag. Opens a form with a standard < form > tag and accepts six parameters. All parameters are optional, so you can just leave it empty and the < form > tag will be created automatically with the proper attributes. The optional first parameter contains the form's name. The optional second parameter contains the form's ID. The optional third parameter contains the form's action. The optional fourth parameter contains the form's method. Default is POST . The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter contains an associative array which creates hidden fields. Opening a form and setting an ID $form -> open ( 'MyForm' ); Produces the following HTML (assuming our script's filename is form.php) < form action = \"form.php\" name = \"MyForm\" id = \"MyForm\" method = \"post\" accept-charset = \"utf-8\" > Adding the form action manually $form -> open ( '' , '' , 'contact.php' , '' , 'class=\"bar\"' ); Produces the following HTML < form action = \"contact.php\" method = \"post\" accept-charset = \"utf-8\" class = \"bar\" > Adding hidden input fields Hidden fields can be added by passing an associative array to the sixth parameter, where the array key is the field name and the array value is the field's value. $hidden = [ 'username' => 'JohnWick' , 'email' => 'johnwick@gunfu.com' ]; $form -> open ( 'form.php' , '' , '' , '' , '' , $hidden ); Produces the following HTML < form action = \"form.php\" name = \"MyForm\" id = \"MyForm\" method = \"post\" accept-charset = \"utf-8\" > < input type = \"hidden\" name = \"username\" id = \"username\" value = \"JohnWick\" > < input type = \"hidden\" name = \"email\" id = \"email\" value = \"johnwick@gunfu.com\" > Notice If an action isn't specified, open () will assume you want to process the form in the current script and will add the script's filename in the form's action attribute using $_SERVER [ 'SCRIPT_NAME' ] . Notice open () will always add the attribute < form accept-charset = \"utf-8\" > , unless you change the $charset property. Warning The global property $form->id will override the second parameter of open () . open_multipart This method is identical to open () except that it adds the < form enctype = \"multipart/form-data\" > attribute. close Closes the form with a standard </ form > tag. Example $form -> close (); Produces the following HTML </ form > Text Inputs text Creates an < input type = \"text\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, Placeholders, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's or Bulma's help text. Info If an ID is not entered in the fourth parameter, it will be created using the name . Create a text input element $form -> text ( 'name' ); Produces the following HTML < input type = \"text\" name = \"name\" id = \"name\" > Create a text input element with a label and default value $form -> text ( 'name' , 'Your name' , 'John Wick' ); Produces the following HTML < label for = \"name\" > Your name </ label > < input type = \"text\" name = \"name\" id = \"name\" value = \"John Wick\" > Create a text input element with a placeholder, and additional class to a Bootstrap input $form -> text ( 'name' , '' , '' , '' , 'placeholder=\"Name\" class=\"gunfu\"' ); Produces the following HTML < input type = \"text\" name = \"name\" id = \"name\" value = \"\" placeholder = \"Name\" class = \"form-control gunfu\" > Create a text input element using an associative array $data = [ 'name' => 'name' , 'label' => 'Your name' , 'id' => 'name' , 'value' => '' , 'maxlength' => '32' , 'class' => 'input' , 'placeholder' => 'Enter your name...' ]; $form -> text ( $data ); Produces the following HTML < label for = \"name\" > Your name </ label > < input name = \"name\" id = \"name\" maxlength = \"32\" class = \"input\" placeholder = \"Enter your name...\" type = \"text\" > Formr also supports adding Bootstrap and Bulma inline help classes. Adding inline help $form = new Formr\\Formr ( 'bootstrap' ); $form -> text ( 'name' , 'Name' , 'John Wick' , '' , '' , 'please enter your name' ); Produces something like... < div id = \"_name\" class = \"form-group\" > < label for = \"name\" > Name </ label > < input name = \"name\" id = \"name\" value = \"John Wick\" type = \"text\" class = \"form-control\" > < p class = \"form-text\" > please enter your name </ p > </ div > Tip You can also specify if you want the .form-text text to show only when there's a form error on that field by wrapping the string with square brackets [ ] $form -> text ( 'name' , 'Name' , '' , '' , '' , '[please enter your name]' ); color Identical to text () except that it creates an < input type = \"color\" > element. date Identical to text () except that it creates an < input type = \"date\" > element. datetime Identical to text () except that it creates an < input type = \"datetime-local\" > element. email Identical to text () except that it creates an < input type = \"email\" > element. hidden Creates a standard < input type = \"hidden\" > element . The required first parameter contains the field's name. The required second parameter contains the field's value. Example $form -> hidden ( 'fname' , 'John' ); Produces the following HTML < input type = \"hidden\" name = \"fname\" id = \"fname\" value = \"John\" > Create hidden elements with an associative array $data = [ 'name' => 'John Wick' , 'email' => 'johnwick@gunfu.com' , 'url' => 'http://gunfu.com' ]; $form -> hidden ( $data ); Produces the following HTML < input type = \"hidden\" name = \"name\" id = \"name\" value = \"John Wick\" > < input type = \"hidden\" name = \"email\" id = \"email\" value = \"johnwick@gunfu.com\" > < input type = \"hidden\" name = \"url\" id = \"url\" value = \"http://gunfu.com\" > month Identical to text () except that it creates an < input type = \"month\" > element. number Identical to text () except that it creates an < input type = \"number\" > element. password Identical to text () except that it creates an < input type = \"password\" > element. range Identical to text () except that it creates an < input type = \"range\" > element. search Identical to text () except that it creates an < input type = \"search\" > element. tel Identical to text () except that it creates an < input type = \"tel\" > element. textarea Identical to text () except that it creates a < textarea > element. time Identical to text () except that it creates an < input type = \"time\" > element. url Identical to text () except that it creates an < input type = \"url\" > element. value Prints the field's value after the form has been submitted. Use when building forms in HTML. Example < input type = \"text\" name = \"address\" value = \"<?php $form->value('address') ?>\" > week Identical to text () except that it creates an < input type = \"week\" > element. Checkboxes & Radios checkbox Creates an < input type = \"checkbox\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. The optional seventh parameter tells Formr if the checkbox should be ticked. Example: create a standard checkbox $form -> checkbox ( 'agree' , 'I Agree' , 'agree' , 'agreeID' ); Produces the following HTML < label for = \"agree\" > < input type = \"checkbox\" name = \"agree\" id = \"agreeID\" value = \"agree\" > I Agree </ label > Tick a checkbox on page load $form -> checkbox ( 'agree' , 'I Agree' , 'agree' , 'agree' , '' , '' , 'checked' ); Produces the following HTML < label for = \"agree\" > < input checked = \"checked\" type = \"checkbox\" name = \"agree\" id = \"agree\" value = \"agree\" > I Agree </ label > Warning Notice how in the seventh parameter we used the string checked instead of the boolean TRUE ? This is because anything in that parameter will return TRUE , even if it's an incorrect value. Therefore we must either enter the string checked , the string selected , or the actual checkbox value (example below) to tell Formr we want this element checked on form load. Tick a checkbox using a variable $favorite_fruit = 'bananas' ; $form -> checkbox ( 'bananas' , 'Bananas' , 'bananas' , '' , '' , '' , $favorite_fruit ); Produces the following HTML < input checked = \"checked\" type = \"checkbox\" name = \"bananas\" id = \"bananas\" value = \"bananas\" > < label class = \"form-check-label\" for = \"bananas\" > Bananas </ label > checkbox_inline Identical to checkbox () , plus adds the appropriate Bootstrap CSS classes to the < label > and enclosing < div > . radio Identical to checkbox () except that it creates an < input type = \"radio\" > element. radio_inline Identical to radio () , plus adds the appropriate Bootstrap CSS classes to the < label > and enclosing < div > . Select Menus select Creates a standard < select > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. The optional seventh parameter contains a default value. The required eighth parameter contains an array of options to populate the menu. Using an array to create a select menu $options = [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ]; // notice that we added a 'selected' value in the 7th parameter $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , 'yertle' , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" selected > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Instead of selecting a value from our $options array we can insert a string, and if a match isn't available in the $options array then an empty < option > tag will be created instead. Adding a default option on the fly $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , 'Select a Book...' , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" > < option value = \"\" > Select a Book... </ option > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Tip You may also pass an array of default values through the 7th parameter and Formr will create a < select multiple > element. Selecting multiple options $options = [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ]; $selected = [ 'cat' , 'yertle' ]; $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , $selected , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" multiple id = \"books\" > < option value = \"cat\" selected > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" selected > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > It's also possible to create the select menu and all of the options using an associative array. Creating a select menu from an associative array $data = [ 'name' => 'books' , 'id' => 'books' , 'label' => 'Books' , 'options' => [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ], 'selected' => 'lorax' , 'value' => '' ]; $form -> select ( $data ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" class = \"input\" > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" selected > The Lorax </ option > < option value = \"yertle\" > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Building selects with strings The select () method also has a little trick up its sleeve: if you pass a string as the 8th parameter, Formr will look for a method with the same name inside the lib/class.formr.dropdowns.php or my_classes/my.dropdowns.php files. For instance, if you enter the string states in the 8th parameter, Formr will automatically produce a menu containing all 50 US states. This is basically a plugin system, which will not only allow you to tap into all of Formr's built-in menus, but will also allow you to create and save your own. Check out the Formr Extend repo for more information on creating your own dropdown menus. Example $form -> select ( 'state' , 'State:' , '' , '' , '' , '' , '' , 'states' ); Produces the following HTML < label for = \"state\" > State: </ label > < select name = \"state\" id = \"state\" > < option value = \"\" selected = \"selected\" > Select a State... </ option > < option value = \"AL\" > Alabama </ option > < option value = \"AK\" > Alaska </ option > ... < option value = \"WI\" > Wisconsin </ option > < option value = \"WY\" > Wyoming </ option > </ select > Following is a list of Formr's built-in menus Menu Name Description states Displays all 50 U.S. States countries Displays all World Countries provinces Displays all Canadian Provinces states_provinces Displays all U.S. States and Canadian Provinces age Displays ages in groups, 18-24, 25-29, etc. height Displays a list of heights in feet and inches years_old Makes sure a person is of a certain age. Default is 18 years old days Displays numbers starting from 1 - 31. Good for registration forms months Display months of the year, with the month name being the key and the value years Displays every year starting from 1930. Good for registration forms months_alpha Displays months of the year with a numeric key cc_months Displays months of the year, with the key being an integer. Good for credit card forms cc_years Displays the current year up to 2025. Good for credit card forms select_multiple Identical to select () , plus adds the multiple attribute to create a multiple select list. dropdown Alias of select () dropdown_multiple Alias of select_multiple () File Uploads file Creates an < input type = \"file\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. Example $form -> file ( 'image' ); Produces the following HTML < input type = \"file\" name = \"image\" > file_multiple Identical to file () except that it adds the multiple attribute, which allows the user to select multiple files with only one input. Example $form -> file_multiple ( 'images[]' ); Produces the following HTML < input type = \"file\" name = \"images[]\" multiple > Warning Because we're uploading multiple files we have to prepend our field name with square brackets [] to create an array. upload Alias of file () . upload_multiple Alias of file_multiple () . Buttons button Creates a standard < button type = \"button\" > element. The optional first parameter contains the button name. The optional second parameter contains label text. The optional third parameter contains the button's value. The optional fourth parameter contains the button's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> button (); Produces the following HTML < button type = \"button\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > Changing the button text $form -> button ( 'button' , '' , 'Press Me' ); Produces the following HTML < button type = \"button\" name = \"button\" id = \"button\" class = \"button\" > Press Me </ button > input_submit Identical to button () except it creates an < input type = \"submit\" > element. Example $form -> input_submit (); Produces the following HTML < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"button\" > submit_button Creates a standard < button type = \"submit\" > element. The only parameter contains the button's value text and is optional. Example $form -> submit_button (); Produces the following HTML < button type = \"submit\" name = \"submit\" id = \"submit\" class = \"button\" > Submit </ button > Change the button value $form -> submit_button ( 'Submit Form' ); Produces the following HTML < button type = \"submit\" name = \"submit\" id = \"submit\" class = \"button\" > Submit Form </ button > reset_button Creates a standard < button type = \"reset\" > element. The only parameter contains the button's value text and is optional. Example $form -> reset_button (); Produces the following HTML < button type = \"reset\" name = \"reset\" id = \"reset\" class = \"button\" > Reset </ button > Messaging messages Use this method to print your form's messages. If using Bootstrap as your wrapper, error messages will be formatted automatically using the proper alert CSS classes. The optional first parameter contains your field wrapper's open tag. The optional second parameter contains your field wrapper's close tag. Example $form -> messages (); Wrap messages in a custom div $form -> messages ( '<div class=\"error\">' , '</div>' ); Info messages () will not print anything to the screen if Formr's $errors array is empty, so there's really no reason why you shouldn't have it in your scripts, as it also prints out error messages if you forgot to add a property or configured something incorrectly. error_message Add your own custom error messages throughout your application. Uses the Bootstrap or Bulma error classes, which can be changed via the $controls property or by creating your own wrapper class. Visit the Extend Repo for more info on creating your own wrappers. Example $form -> error_message ( 'This is bad, and you should feel bad!' ); info_message Identical to error_message () except adds an info CSS class. success_message Identical to error_message () except adds a success CSS class. Print a success message after the form has been submitted if ( $form -> submitted ()) { if ( $form -> ok ()) { $form -> success_message ( 'Thank you for submitting our form!' ); } } warning_message Identical to error_message () except adds a warning CSS class. Error Handling errors Use this method to see if Formr's $errors array is empty. Example if ( $form -> errors ()) { echo 'there were form errors' ; } else { echo 'no errors!' ; } add_to_errors Manually add a field's name to the $errors array and it will be printed via the messages () method. Example $form -> add_to_errors ( 'zip' ); You can add a custom message by separating your field name and message with a pipe character. Adding a custom error message $form -> add_to_errors ( 'zip|Please enter your zip code' ); in_errors Check if a field is in the $errors array. Check if email is in the $errors array if ( $form -> in_errors ( 'email' )) { // email is in the $errors array } in_errors_if Returns a string if the given form field is in the $errors array. Example $form -> in_errors_if ( 'name' , 'Please enter your name' ); in_errors_else If the given field is in the $errors array return a string, else return another string. Example $form -> in_errors_else ( 'name' , 'Please enter your name' , 'You entered your name!' ); Labels label Creates a standard < label > tag. The required first parameter contains the field name for which this label is being created. The required second parameter contains the label text and is required. The optional third parameter contains an ID attribute. The optional fourth parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> label ( 'name' , 'Your name:' ); Produces the following HTML < label for = \"name\" > Your name: </ label > Add a CSS class to the label $form -> label ( 'name' , 'Your name:' , '' , 'class=\"label\"' ); Produces the following HTML < label for = \"name\" class = \"label\" > Your name: </ label > label_open Identical to the label () method, except that it does not add a close </ label > tag. label_close Creates a standard </ label > tag. The only parameter to label_close () contains the label text. This is handy if you want to wrap a label around a checkbox or radio button and want the text to be after the element, rather than before. Example $form -> label_close ( 'Derby' ); Produces the following HTML Derby </ label > Full label example $form -> label_open ( 'bowler' ); $form -> input_checkbox ( 'bowler' , '' , 'bowler' ); $form -> label_close ( 'Bowler' ); Produces the following HTML < label for = \"bowler\" > < input type = \"checkbox\" name = \"bowler\" id = \"bowler\" value = \"bowler\" > Bowler </ label > Fieldsets fieldset_open Creates a standard < fieldset > tag. The optional first parameter contains the legend text. The optional second parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> fieldset_open ( 'Contact information' ); Produces the following HTML < fieldset > < legend > Contact information </ legend > fieldset_close Creates a standard </ fieldset > tag. The only parameter accepts a string and is optional. Example $form -> fieldset_close (); Produces the following HTML </ fieldset > Email send_email Sends a very basic HTML or plain-text email using PHP's mail () function. Optionally loops though the contents of the $_POST array and prints the key/value pair in the email. The required first parameter is the recipient's email address. The required second parameter is the email subject. The required third parameter contains the message body. The optional fourth parameter accepts a 'from' email address. The optional fifth parameter is binary: set to TRUE if you'd like to send the email as HTML. Send a plain-text email $to = 'recipient@email.com' ; $subject = 'Ahoy, Matey!' ; $message = 'Welcome to our website!...' ; $form -> send_email ( $to , $subject , $message ); Send an HTML Email with a Return Address $to = 'recipient@email.com' ; $from = 'me@domain.com' ; $subject = 'Ahoy, Matey!' ; $message = 'Welcome to our website!...' ; $form -> send_email ( $to , $subject , $message , $from , TRUE ); Send the $_POST array as HTML $to = 'recipient@email.com' ; $from = 'me@domain.com' ; $subject = 'Ahoy, Matey!' ; $form -> send_email ( $to , $subject , 'POST' , $from , TRUE ); Produces something like your_name: John Wick your_email: johnwick@gunfu.com If you want prettier emails while looping through the $_POST array, name your input fields with capital letters and underscores, and then prepend each name with an underscore. Prepending a field with an underscore tells Formr to replace all underscores with spaces, making for an easier to read email. Example $form -> input_text ( '_First_Name' , 'First Name' ); $form -> input_text ( '_Last_Name' , 'Last Name' ); And the email will look like something like this First Name: John Last Name: Wick Debugging printr Incredibly handy! Formr's shortcut for PHP's print_r () function, which automatically formats and prints the contents of an array; or just pass a string for easy debugging. Example $form -> printr ( $_POST ); $form -> printr ( $_GET ); $form -> printr ( $data ); // pass a string for breakpoints... $form -> printr ( 'Here' ); $form -> printr ( 'POST' ); // lazy alias... $form -> printr ( 'GET' ); // lazy alias... dump Alias of printr () . dd Same as printr () but adds die to kill the script after printing. info Prints out the settings of your form. Try it! Example $form -> info (); Misc. csrf The only parameter changes the expiration time, in seconds, and is optional. Default expiration value is 3600 seconds (1 hour). Adds CSRF protection to your form by creating a hidden field and filling it with a random token, which is validated upon form submission. If the token fails validation an error message will be shown to the user. Example $form -> open (); $form -> csrf ( 5600 ); Produces something like < input type = \"hidden\" name = \"csrf_token\" value = \"6d956b86e3bxoe29d7df1f492df85654fed6ee52591c9cd1bf854d6079e7fd3c|cleo93jclk3k8\" > Warning csrf needs a SESSION to work, so you must add session_start() at the top of your script or you will receive an error. ok Easy way to check if there are no errors with the submitted form. Send an email if the form was submitted successfully if ( $form -> submitted ()) { if ( $form -> ok ()) { $form -> success_message = 'We have received your submission|Thank You!' ; } } slug Only allows letters, numbers and underscores in a string. If any character other than a letter, number, or underscore is encountered it will be converted to an underscore. Example $username = $form -> slug ( 'P Sherman 42' ); Produces the following slugged text P_Sherman_42 unset_session Performs a session_unset () on the $form -> session property upon refresh or submit. Will output a message to the browser letting you know it has been unset. Example $form -> session = 'myForm' ; $form -> session_unset (); heading This method is useful if you have a form that is more along the lines of a test, or questionnaire and you want to really call out the field when there's an error in the form. Basically, you enter the field name in the first parameter and the string in the second, and if there's an error the string will be enclosed in tags. Example < h3 > <?php echo $form->heading('question1','How many inches in a foot?'); ?> </ h3 > // will produce upon page load < h3 > How many inches in a foot? </ h3 > // will produce upon form error < h3 >< span class = \"error\" > How many inches in a foot? </ span ></ h3 >","title":"Methods"},{"location":"methods/#methods","text":"This document contains a list of Formr's public methods, grouped by functionality.","title":"Methods"},{"location":"methods/#form-builders","text":"","title":"Form Builders"},{"location":"methods/#create_form","text":"This method allows you to create a form by entering the form's label text. The only parameter contains a comma separated string of your form's labels and is required. Build a basic form $form -> create_form ( 'Name, Email' ); Produces the following HTML < form action = \"/index.php\" id = \"myForm\" method = \"post\" accept-charset = \"utf-8\" > < label for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"input\" > < label for = \"email\" > Email </ label > < input type = \"email\" name = \"email\" id = \"email\" class = \"input\" > < button type = \"submit\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > </ form > The default behavior is to create each form element as < input type = \"text\" > . If you want to specify an element type, just add a pipe character and the type of element you want to use. Specify input types $form -> create_form ( 'Name, Comments|textarea' ); Produces the following HTML < form action = \"/index.php\" id = \"myForm\" method = \"post\" accept-charset = \"utf-8\" > < label for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"input\" > < label for = \"comments\" > Comments </ label > < textarea name = \"comments\" id = \"comments\" class = \"input\" ></ textarea > < button type = \"submit\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > </ form > Tip Formr will create an < input type = \"email\" > element if your label text contains the word email .","title":"create_form"},{"location":"methods/#create_form_multipart","text":"Identical to create_form () except that it adds the < form enctype = \"multipart/form-data\" > attribute.","title":"create_form_multipart"},{"location":"methods/#create","text":"Identical to create_form () except that it omits the < form ></ form > tags and submit button. Warning The create () , create_form () , and create_form_multipart () form building methods are meant for rapid creation of basic forms, so they won't fully support all input element types, such as select , checkbox , or radio . If you require those elements, consider using fastform () , or build the form element-by-element.","title":"create"},{"location":"methods/#fastform","text":"This method allows you to build incredibly complex forms using simple key/value arrays and strings. Read the FastForm docs for complete examples. Validate with the fastpost () method; The first parameter contains the array (or string) and is required. If you'd like to add CSRF protection, just enter CSRF or TRUE in the second parameter. Example $form -> fastform ( 'login' ); Produces the following HTML < form action = \"/index.php\" id = \"login\" method = \"post\" accept-charset = \"utf-8\" > < fieldset > < input type = \"text\" name = \"username\" id = \"username\" class = \"input\" placeholder = \"username\" > < input type = \"password\" name = \"password\" id = \"password\" class = \"input\" autocorrect = \"off\" autocapitalize = \"off\" placeholder = \"password\" > < input type = \"submit\" name = \"submit\" value = \"Login\" id = \"submit\" class = \"button\" > </ fieldset > </ form >","title":"fastform"},{"location":"methods/#fastform_multipart","text":"Identical to fastform () except that it adds the < form enctype = \"multipart/form-data\" > attribute. Warning When using CSRF protection you must enable sessions by adding session_start () at the top of your file.","title":"fastform_multipart"},{"location":"methods/#form-processors","text":"","title":"Form Processors"},{"location":"methods/#validate","text":"This method allows you to retrieve and validate a form's values by entering only the form's label text. Read the Validate Form docs for complete examples. The only parameter contains a comma separated string of your form's labels and is required. Validate a basic form $form -> validate ( 'Name, Email, Comments' ); All form values are put into an array, so it's really easy to retrieve them. Retrieve values $data = $form -> validate ( 'Name, Email, Comments' ); $name = $data [ 'name' ]; $email = $data [ 'email' ]; $comments = $data [ 'comments' ]; You can add validation rules to each field by wrapping them in parenthesis. Each rule must be separated by a pipe character. If a field is named Email it will automatically have the valid_email rule applied. Validate values $form -> validate ( 'Name(min[2]|max[60]), Email, Comments(min[5])' );","title":"validate"},{"location":"methods/#post","text":"This method allows you to retrieve and validate a form's values with much more control and fine-tuning then the validate () method. The first required parameter is the form field's name. The optional second parameter contains a human readable field name and custom error message. The optional third parameter contains validation rules. Basic example $name = $form -> post ( 'name' ); Make sure a valid email address is posted $email = $form -> post ( 'email' , 'Email' , 'valid_email' ); Password is not less than 6 characters and not more than 20 $password = $form -> post ( 'password' , 'Password' , 'min[6]|max[20]' ); Create a custom error message $email = $form -> post ( 'email' , 'Email|Enter your email address' , 'valid_email' ); Info The form data is passed through PHP's trim () and strip_tags () functions for basic sanitation. If you want to allow HTML in your forms, just add the allow_html validation rule in the third parameter and only trim () will be applied to the input.","title":"post"},{"location":"methods/#get","text":"Identical to post () except that it retrieves values via PHP's $_GET array.","title":"get"},{"location":"methods/#fastpost","text":"This method will return an array of key/value pairs, and perform validation. Read the FastForm docs for complete examples. Use with the fastform () method. The only parameter contains an array, or the form name as a string, and is required. Example <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); if ( $form -> submitted ()) { $data = $form -> fastpost ( 'login' ); $username = $data [ 'username' ]; $password = $data [ 'password' ]; } ?> <!DOCTYPE html> <html lang=\"en\"> <body> <div class=\"container\"> <?php $form -> fastform ( 'login' ); ?> </div> </body> </html>","title":"fastpost"},{"location":"methods/#redirect","text":"This method lets you redirect to another URL after the form has been submitted. The only parameter contains the redirection URL and is required. Example if ( $form -> submitted ()) { $form -> redirect ( 'https://mysite.com/thankyou' ); }","title":"redirect"},{"location":"methods/#submitted","text":"The submitted () method checks to see if the form has been submitted or not. It does this by checking the $_SERVER [ 'REQUEST_METHOD' ] for POST . Example if ( $form -> submitted ()){ // form is submitted via POST }","title":"submitted"},{"location":"methods/#form-tags","text":"","title":"Form Tags"},{"location":"methods/#open","text":"Creates a standard < form > tag. Opens a form with a standard < form > tag and accepts six parameters. All parameters are optional, so you can just leave it empty and the < form > tag will be created automatically with the proper attributes. The optional first parameter contains the form's name. The optional second parameter contains the form's ID. The optional third parameter contains the form's action. The optional fourth parameter contains the form's method. Default is POST . The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter contains an associative array which creates hidden fields. Opening a form and setting an ID $form -> open ( 'MyForm' ); Produces the following HTML (assuming our script's filename is form.php) < form action = \"form.php\" name = \"MyForm\" id = \"MyForm\" method = \"post\" accept-charset = \"utf-8\" > Adding the form action manually $form -> open ( '' , '' , 'contact.php' , '' , 'class=\"bar\"' ); Produces the following HTML < form action = \"contact.php\" method = \"post\" accept-charset = \"utf-8\" class = \"bar\" > Adding hidden input fields Hidden fields can be added by passing an associative array to the sixth parameter, where the array key is the field name and the array value is the field's value. $hidden = [ 'username' => 'JohnWick' , 'email' => 'johnwick@gunfu.com' ]; $form -> open ( 'form.php' , '' , '' , '' , '' , $hidden ); Produces the following HTML < form action = \"form.php\" name = \"MyForm\" id = \"MyForm\" method = \"post\" accept-charset = \"utf-8\" > < input type = \"hidden\" name = \"username\" id = \"username\" value = \"JohnWick\" > < input type = \"hidden\" name = \"email\" id = \"email\" value = \"johnwick@gunfu.com\" > Notice If an action isn't specified, open () will assume you want to process the form in the current script and will add the script's filename in the form's action attribute using $_SERVER [ 'SCRIPT_NAME' ] . Notice open () will always add the attribute < form accept-charset = \"utf-8\" > , unless you change the $charset property. Warning The global property $form->id will override the second parameter of open () .","title":"open"},{"location":"methods/#open_multipart","text":"This method is identical to open () except that it adds the < form enctype = \"multipart/form-data\" > attribute.","title":"open_multipart"},{"location":"methods/#close","text":"Closes the form with a standard </ form > tag. Example $form -> close (); Produces the following HTML </ form >","title":"close"},{"location":"methods/#text-inputs","text":"","title":"Text Inputs"},{"location":"methods/#text","text":"Creates an < input type = \"text\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, Placeholders, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's or Bulma's help text. Info If an ID is not entered in the fourth parameter, it will be created using the name . Create a text input element $form -> text ( 'name' ); Produces the following HTML < input type = \"text\" name = \"name\" id = \"name\" > Create a text input element with a label and default value $form -> text ( 'name' , 'Your name' , 'John Wick' ); Produces the following HTML < label for = \"name\" > Your name </ label > < input type = \"text\" name = \"name\" id = \"name\" value = \"John Wick\" > Create a text input element with a placeholder, and additional class to a Bootstrap input $form -> text ( 'name' , '' , '' , '' , 'placeholder=\"Name\" class=\"gunfu\"' ); Produces the following HTML < input type = \"text\" name = \"name\" id = \"name\" value = \"\" placeholder = \"Name\" class = \"form-control gunfu\" > Create a text input element using an associative array $data = [ 'name' => 'name' , 'label' => 'Your name' , 'id' => 'name' , 'value' => '' , 'maxlength' => '32' , 'class' => 'input' , 'placeholder' => 'Enter your name...' ]; $form -> text ( $data ); Produces the following HTML < label for = \"name\" > Your name </ label > < input name = \"name\" id = \"name\" maxlength = \"32\" class = \"input\" placeholder = \"Enter your name...\" type = \"text\" > Formr also supports adding Bootstrap and Bulma inline help classes. Adding inline help $form = new Formr\\Formr ( 'bootstrap' ); $form -> text ( 'name' , 'Name' , 'John Wick' , '' , '' , 'please enter your name' ); Produces something like... < div id = \"_name\" class = \"form-group\" > < label for = \"name\" > Name </ label > < input name = \"name\" id = \"name\" value = \"John Wick\" type = \"text\" class = \"form-control\" > < p class = \"form-text\" > please enter your name </ p > </ div > Tip You can also specify if you want the .form-text text to show only when there's a form error on that field by wrapping the string with square brackets [ ] $form -> text ( 'name' , 'Name' , '' , '' , '' , '[please enter your name]' );","title":"text"},{"location":"methods/#color","text":"Identical to text () except that it creates an < input type = \"color\" > element.","title":"color"},{"location":"methods/#date","text":"Identical to text () except that it creates an < input type = \"date\" > element.","title":"date"},{"location":"methods/#datetime","text":"Identical to text () except that it creates an < input type = \"datetime-local\" > element.","title":"datetime"},{"location":"methods/#email","text":"Identical to text () except that it creates an < input type = \"email\" > element.","title":"email"},{"location":"methods/#hidden","text":"Creates a standard < input type = \"hidden\" > element . The required first parameter contains the field's name. The required second parameter contains the field's value. Example $form -> hidden ( 'fname' , 'John' ); Produces the following HTML < input type = \"hidden\" name = \"fname\" id = \"fname\" value = \"John\" > Create hidden elements with an associative array $data = [ 'name' => 'John Wick' , 'email' => 'johnwick@gunfu.com' , 'url' => 'http://gunfu.com' ]; $form -> hidden ( $data ); Produces the following HTML < input type = \"hidden\" name = \"name\" id = \"name\" value = \"John Wick\" > < input type = \"hidden\" name = \"email\" id = \"email\" value = \"johnwick@gunfu.com\" > < input type = \"hidden\" name = \"url\" id = \"url\" value = \"http://gunfu.com\" >","title":"hidden"},{"location":"methods/#month","text":"Identical to text () except that it creates an < input type = \"month\" > element.","title":"month"},{"location":"methods/#number","text":"Identical to text () except that it creates an < input type = \"number\" > element.","title":"number"},{"location":"methods/#password","text":"Identical to text () except that it creates an < input type = \"password\" > element.","title":"password"},{"location":"methods/#range","text":"Identical to text () except that it creates an < input type = \"range\" > element.","title":"range"},{"location":"methods/#search","text":"Identical to text () except that it creates an < input type = \"search\" > element.","title":"search"},{"location":"methods/#tel","text":"Identical to text () except that it creates an < input type = \"tel\" > element.","title":"tel"},{"location":"methods/#textarea","text":"Identical to text () except that it creates a < textarea > element.","title":"textarea"},{"location":"methods/#time","text":"Identical to text () except that it creates an < input type = \"time\" > element.","title":"time"},{"location":"methods/#url","text":"Identical to text () except that it creates an < input type = \"url\" > element.","title":"url"},{"location":"methods/#value","text":"Prints the field's value after the form has been submitted. Use when building forms in HTML. Example < input type = \"text\" name = \"address\" value = \"<?php $form->value('address') ?>\" >","title":"value"},{"location":"methods/#week","text":"Identical to text () except that it creates an < input type = \"week\" > element.","title":"week"},{"location":"methods/#checkboxes-radios","text":"","title":"Checkboxes &amp; Radios"},{"location":"methods/#checkbox","text":"Creates an < input type = \"checkbox\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. The optional seventh parameter tells Formr if the checkbox should be ticked. Example: create a standard checkbox $form -> checkbox ( 'agree' , 'I Agree' , 'agree' , 'agreeID' ); Produces the following HTML < label for = \"agree\" > < input type = \"checkbox\" name = \"agree\" id = \"agreeID\" value = \"agree\" > I Agree </ label > Tick a checkbox on page load $form -> checkbox ( 'agree' , 'I Agree' , 'agree' , 'agree' , '' , '' , 'checked' ); Produces the following HTML < label for = \"agree\" > < input checked = \"checked\" type = \"checkbox\" name = \"agree\" id = \"agree\" value = \"agree\" > I Agree </ label > Warning Notice how in the seventh parameter we used the string checked instead of the boolean TRUE ? This is because anything in that parameter will return TRUE , even if it's an incorrect value. Therefore we must either enter the string checked , the string selected , or the actual checkbox value (example below) to tell Formr we want this element checked on form load. Tick a checkbox using a variable $favorite_fruit = 'bananas' ; $form -> checkbox ( 'bananas' , 'Bananas' , 'bananas' , '' , '' , '' , $favorite_fruit ); Produces the following HTML < input checked = \"checked\" type = \"checkbox\" name = \"bananas\" id = \"bananas\" value = \"bananas\" > < label class = \"form-check-label\" for = \"bananas\" > Bananas </ label >","title":"checkbox"},{"location":"methods/#checkbox_inline","text":"Identical to checkbox () , plus adds the appropriate Bootstrap CSS classes to the < label > and enclosing < div > .","title":"checkbox_inline"},{"location":"methods/#radio","text":"Identical to checkbox () except that it creates an < input type = \"radio\" > element.","title":"radio"},{"location":"methods/#radio_inline","text":"Identical to radio () , plus adds the appropriate Bootstrap CSS classes to the < label > and enclosing < div > .","title":"radio_inline"},{"location":"methods/#select-menus","text":"","title":"Select Menus"},{"location":"methods/#select","text":"Creates a standard < select > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. The optional seventh parameter contains a default value. The required eighth parameter contains an array of options to populate the menu. Using an array to create a select menu $options = [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ]; // notice that we added a 'selected' value in the 7th parameter $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , 'yertle' , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" selected > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Instead of selecting a value from our $options array we can insert a string, and if a match isn't available in the $options array then an empty < option > tag will be created instead. Adding a default option on the fly $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , 'Select a Book...' , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" > < option value = \"\" > Select a Book... </ option > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Tip You may also pass an array of default values through the 7th parameter and Formr will create a < select multiple > element. Selecting multiple options $options = [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ]; $selected = [ 'cat' , 'yertle' ]; $form -> select ( 'books' , 'Books' , '' , '' , '' , '' , $selected , $options ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" multiple id = \"books\" > < option value = \"cat\" selected > The Cat in the Hat </ option > < option value = \"lorax\" > The Lorax </ option > < option value = \"yertle\" selected > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > It's also possible to create the select menu and all of the options using an associative array. Creating a select menu from an associative array $data = [ 'name' => 'books' , 'id' => 'books' , 'label' => 'Books' , 'options' => [ 'cat' => 'The Cat in the Hat' , 'lorax' => 'The Lorax' , 'yertle' => 'Yertle the Turtle' , 'grinch' => 'The Grinch Who Stole Christmas' , ], 'selected' => 'lorax' , 'value' => '' ]; $form -> select ( $data ); Produces the following HTML < label for = \"books\" > Books </ label > < select name = \"books\" id = \"books\" class = \"input\" > < option value = \"cat\" > The Cat in the Hat </ option > < option value = \"lorax\" selected > The Lorax </ option > < option value = \"yertle\" > Yertle the Turtle </ option > < option value = \"grinch\" > The Grinch Who Stole Christmas </ option > </ select > Building selects with strings The select () method also has a little trick up its sleeve: if you pass a string as the 8th parameter, Formr will look for a method with the same name inside the lib/class.formr.dropdowns.php or my_classes/my.dropdowns.php files. For instance, if you enter the string states in the 8th parameter, Formr will automatically produce a menu containing all 50 US states. This is basically a plugin system, which will not only allow you to tap into all of Formr's built-in menus, but will also allow you to create and save your own. Check out the Formr Extend repo for more information on creating your own dropdown menus. Example $form -> select ( 'state' , 'State:' , '' , '' , '' , '' , '' , 'states' ); Produces the following HTML < label for = \"state\" > State: </ label > < select name = \"state\" id = \"state\" > < option value = \"\" selected = \"selected\" > Select a State... </ option > < option value = \"AL\" > Alabama </ option > < option value = \"AK\" > Alaska </ option > ... < option value = \"WI\" > Wisconsin </ option > < option value = \"WY\" > Wyoming </ option > </ select > Following is a list of Formr's built-in menus Menu Name Description states Displays all 50 U.S. States countries Displays all World Countries provinces Displays all Canadian Provinces states_provinces Displays all U.S. States and Canadian Provinces age Displays ages in groups, 18-24, 25-29, etc. height Displays a list of heights in feet and inches years_old Makes sure a person is of a certain age. Default is 18 years old days Displays numbers starting from 1 - 31. Good for registration forms months Display months of the year, with the month name being the key and the value years Displays every year starting from 1930. Good for registration forms months_alpha Displays months of the year with a numeric key cc_months Displays months of the year, with the key being an integer. Good for credit card forms cc_years Displays the current year up to 2025. Good for credit card forms","title":"select"},{"location":"methods/#select_multiple","text":"Identical to select () , plus adds the multiple attribute to create a multiple select list.","title":"select_multiple"},{"location":"methods/#dropdown","text":"Alias of select ()","title":"dropdown"},{"location":"methods/#dropdown_multiple","text":"Alias of select_multiple ()","title":"dropdown_multiple"},{"location":"methods/#file-uploads","text":"","title":"File Uploads"},{"location":"methods/#file","text":"Creates an < input type = \"file\" > element. The required first parameter contains the field's name. The optional second parameter contains the field's label text. The optional third parameter contains a default value. The optional fourth parameter contains the field's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. The optional sixth parameter utilizes Bootstrap's . form-text block-level text. Example $form -> file ( 'image' ); Produces the following HTML < input type = \"file\" name = \"image\" >","title":"file"},{"location":"methods/#file_multiple","text":"Identical to file () except that it adds the multiple attribute, which allows the user to select multiple files with only one input. Example $form -> file_multiple ( 'images[]' ); Produces the following HTML < input type = \"file\" name = \"images[]\" multiple > Warning Because we're uploading multiple files we have to prepend our field name with square brackets [] to create an array.","title":"file_multiple"},{"location":"methods/#upload","text":"Alias of file () .","title":"upload"},{"location":"methods/#upload_multiple","text":"Alias of file_multiple () .","title":"upload_multiple"},{"location":"methods/#buttons","text":"","title":"Buttons"},{"location":"methods/#button","text":"Creates a standard < button type = \"button\" > element. The optional first parameter contains the button name. The optional second parameter contains label text. The optional third parameter contains the button's value. The optional fourth parameter contains the button's ID. The optional fifth parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> button (); Produces the following HTML < button type = \"button\" name = \"button\" id = \"button\" class = \"button\" > Submit </ button > Changing the button text $form -> button ( 'button' , '' , 'Press Me' ); Produces the following HTML < button type = \"button\" name = \"button\" id = \"button\" class = \"button\" > Press Me </ button >","title":"button"},{"location":"methods/#input_submit","text":"Identical to button () except it creates an < input type = \"submit\" > element. Example $form -> input_submit (); Produces the following HTML < input type = \"submit\" name = \"submit\" value = \"Submit\" id = \"submit\" class = \"button\" >","title":"input_submit"},{"location":"methods/#submit_button","text":"Creates a standard < button type = \"submit\" > element. The only parameter contains the button's value text and is optional. Example $form -> submit_button (); Produces the following HTML < button type = \"submit\" name = \"submit\" id = \"submit\" class = \"button\" > Submit </ button > Change the button value $form -> submit_button ( 'Submit Form' ); Produces the following HTML < button type = \"submit\" name = \"submit\" id = \"submit\" class = \"button\" > Submit Form </ button >","title":"submit_button"},{"location":"methods/#reset_button","text":"Creates a standard < button type = \"reset\" > element. The only parameter contains the button's value text and is optional. Example $form -> reset_button (); Produces the following HTML < button type = \"reset\" name = \"reset\" id = \"reset\" class = \"button\" > Reset </ button >","title":"reset_button"},{"location":"methods/#messaging","text":"","title":"Messaging"},{"location":"methods/#messages","text":"Use this method to print your form's messages. If using Bootstrap as your wrapper, error messages will be formatted automatically using the proper alert CSS classes. The optional first parameter contains your field wrapper's open tag. The optional second parameter contains your field wrapper's close tag. Example $form -> messages (); Wrap messages in a custom div $form -> messages ( '<div class=\"error\">' , '</div>' ); Info messages () will not print anything to the screen if Formr's $errors array is empty, so there's really no reason why you shouldn't have it in your scripts, as it also prints out error messages if you forgot to add a property or configured something incorrectly.","title":"messages"},{"location":"methods/#error_message","text":"Add your own custom error messages throughout your application. Uses the Bootstrap or Bulma error classes, which can be changed via the $controls property or by creating your own wrapper class. Visit the Extend Repo for more info on creating your own wrappers. Example $form -> error_message ( 'This is bad, and you should feel bad!' );","title":"error_message"},{"location":"methods/#info_message","text":"Identical to error_message () except adds an info CSS class.","title":"info_message"},{"location":"methods/#success_message","text":"Identical to error_message () except adds a success CSS class. Print a success message after the form has been submitted if ( $form -> submitted ()) { if ( $form -> ok ()) { $form -> success_message ( 'Thank you for submitting our form!' ); } }","title":"success_message"},{"location":"methods/#warning_message","text":"Identical to error_message () except adds a warning CSS class.","title":"warning_message"},{"location":"methods/#error-handling","text":"","title":"Error Handling"},{"location":"methods/#errors","text":"Use this method to see if Formr's $errors array is empty. Example if ( $form -> errors ()) { echo 'there were form errors' ; } else { echo 'no errors!' ; }","title":"errors"},{"location":"methods/#add_to_errors","text":"Manually add a field's name to the $errors array and it will be printed via the messages () method. Example $form -> add_to_errors ( 'zip' ); You can add a custom message by separating your field name and message with a pipe character. Adding a custom error message $form -> add_to_errors ( 'zip|Please enter your zip code' );","title":"add_to_errors"},{"location":"methods/#in_errors","text":"Check if a field is in the $errors array. Check if email is in the $errors array if ( $form -> in_errors ( 'email' )) { // email is in the $errors array }","title":"in_errors"},{"location":"methods/#in_errors_if","text":"Returns a string if the given form field is in the $errors array. Example $form -> in_errors_if ( 'name' , 'Please enter your name' );","title":"in_errors_if"},{"location":"methods/#in_errors_else","text":"If the given field is in the $errors array return a string, else return another string. Example $form -> in_errors_else ( 'name' , 'Please enter your name' , 'You entered your name!' );","title":"in_errors_else"},{"location":"methods/#labels","text":"","title":"Labels"},{"location":"methods/#label","text":"Creates a standard < label > tag. The required first parameter contains the field name for which this label is being created. The required second parameter contains the label text and is required. The optional third parameter contains an ID attribute. The optional fourth parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> label ( 'name' , 'Your name:' ); Produces the following HTML < label for = \"name\" > Your name: </ label > Add a CSS class to the label $form -> label ( 'name' , 'Your name:' , '' , 'class=\"label\"' ); Produces the following HTML < label for = \"name\" class = \"label\" > Your name: </ label >","title":"label"},{"location":"methods/#label_open","text":"Identical to the label () method, except that it does not add a close </ label > tag.","title":"label_open"},{"location":"methods/#label_close","text":"Creates a standard </ label > tag. The only parameter to label_close () contains the label text. This is handy if you want to wrap a label around a checkbox or radio button and want the text to be after the element, rather than before. Example $form -> label_close ( 'Derby' ); Produces the following HTML Derby </ label > Full label example $form -> label_open ( 'bowler' ); $form -> input_checkbox ( 'bowler' , '' , 'bowler' ); $form -> label_close ( 'Bowler' ); Produces the following HTML < label for = \"bowler\" > < input type = \"checkbox\" name = \"bowler\" id = \"bowler\" value = \"bowler\" > Bowler </ label >","title":"label_close"},{"location":"methods/#fieldsets","text":"","title":"Fieldsets"},{"location":"methods/#fieldset_open","text":"Creates a standard < fieldset > tag. The optional first parameter contains the legend text. The optional second parameter contains a string, which lets you add CSS, JavaScript, etc. Example $form -> fieldset_open ( 'Contact information' ); Produces the following HTML < fieldset > < legend > Contact information </ legend >","title":"fieldset_open"},{"location":"methods/#fieldset_close","text":"Creates a standard </ fieldset > tag. The only parameter accepts a string and is optional. Example $form -> fieldset_close (); Produces the following HTML </ fieldset >","title":"fieldset_close"},{"location":"methods/#email_1","text":"","title":"Email"},{"location":"methods/#send_email","text":"Sends a very basic HTML or plain-text email using PHP's mail () function. Optionally loops though the contents of the $_POST array and prints the key/value pair in the email. The required first parameter is the recipient's email address. The required second parameter is the email subject. The required third parameter contains the message body. The optional fourth parameter accepts a 'from' email address. The optional fifth parameter is binary: set to TRUE if you'd like to send the email as HTML. Send a plain-text email $to = 'recipient@email.com' ; $subject = 'Ahoy, Matey!' ; $message = 'Welcome to our website!...' ; $form -> send_email ( $to , $subject , $message ); Send an HTML Email with a Return Address $to = 'recipient@email.com' ; $from = 'me@domain.com' ; $subject = 'Ahoy, Matey!' ; $message = 'Welcome to our website!...' ; $form -> send_email ( $to , $subject , $message , $from , TRUE ); Send the $_POST array as HTML $to = 'recipient@email.com' ; $from = 'me@domain.com' ; $subject = 'Ahoy, Matey!' ; $form -> send_email ( $to , $subject , 'POST' , $from , TRUE ); Produces something like your_name: John Wick your_email: johnwick@gunfu.com If you want prettier emails while looping through the $_POST array, name your input fields with capital letters and underscores, and then prepend each name with an underscore. Prepending a field with an underscore tells Formr to replace all underscores with spaces, making for an easier to read email. Example $form -> input_text ( '_First_Name' , 'First Name' ); $form -> input_text ( '_Last_Name' , 'Last Name' ); And the email will look like something like this First Name: John Last Name: Wick","title":"send_email"},{"location":"methods/#debugging","text":"","title":"Debugging"},{"location":"methods/#printr","text":"Incredibly handy! Formr's shortcut for PHP's print_r () function, which automatically formats and prints the contents of an array; or just pass a string for easy debugging. Example $form -> printr ( $_POST ); $form -> printr ( $_GET ); $form -> printr ( $data ); // pass a string for breakpoints... $form -> printr ( 'Here' ); $form -> printr ( 'POST' ); // lazy alias... $form -> printr ( 'GET' ); // lazy alias...","title":"printr"},{"location":"methods/#dump","text":"Alias of printr () .","title":"dump"},{"location":"methods/#dd","text":"Same as printr () but adds die to kill the script after printing.","title":"dd"},{"location":"methods/#info","text":"Prints out the settings of your form. Try it! Example $form -> info ();","title":"info"},{"location":"methods/#misc","text":"","title":"Misc."},{"location":"methods/#csrf","text":"The only parameter changes the expiration time, in seconds, and is optional. Default expiration value is 3600 seconds (1 hour). Adds CSRF protection to your form by creating a hidden field and filling it with a random token, which is validated upon form submission. If the token fails validation an error message will be shown to the user. Example $form -> open (); $form -> csrf ( 5600 ); Produces something like < input type = \"hidden\" name = \"csrf_token\" value = \"6d956b86e3bxoe29d7df1f492df85654fed6ee52591c9cd1bf854d6079e7fd3c|cleo93jclk3k8\" > Warning csrf needs a SESSION to work, so you must add session_start() at the top of your script or you will receive an error.","title":"csrf"},{"location":"methods/#ok","text":"Easy way to check if there are no errors with the submitted form. Send an email if the form was submitted successfully if ( $form -> submitted ()) { if ( $form -> ok ()) { $form -> success_message = 'We have received your submission|Thank You!' ; } }","title":"ok"},{"location":"methods/#slug","text":"Only allows letters, numbers and underscores in a string. If any character other than a letter, number, or underscore is encountered it will be converted to an underscore. Example $username = $form -> slug ( 'P Sherman 42' ); Produces the following slugged text P_Sherman_42","title":"slug"},{"location":"methods/#unset_session","text":"Performs a session_unset () on the $form -> session property upon refresh or submit. Will output a message to the browser letting you know it has been unset. Example $form -> session = 'myForm' ; $form -> session_unset ();","title":"unset_session"},{"location":"methods/#heading","text":"This method is useful if you have a form that is more along the lines of a test, or questionnaire and you want to really call out the field when there's an error in the form. Basically, you enter the field name in the first parameter and the string in the second, and if there's an error the string will be enclosed in tags. Example < h3 > <?php echo $form->heading('question1','How many inches in a foot?'); ?> </ h3 > // will produce upon page load < h3 > How many inches in a foot? </ h3 > // will produce upon form error < h3 >< span class = \"error\" > How many inches in a foot? </ span ></ h3 >","title":"heading"},{"location":"properties/","text":"Properties This document contains a list of Formr's public properties. action The form's action. Formr will automatically insert the current script's filename into the < form > tag unless you set this property to something else. Typically used with fastform () . Set the form's action to login.php $form -> action = 'login.php' ; $form -> fastform ( 'login' ); Produces the following HTML < form action = \"login.php\" method = \"post\" accept-charset = \"utf-8\" > ... </ form > charset Formr's default character set is UTF-8 , however, you can easily change this to something else, such as Latin-1 . Set the form's charset to Latin-1 $form -> charset = 'Latin-1' ; controls An array containing all of the CSS classes used in Formr, which you can easily set when instantiating a new form. You can also create your own wrappers and save them in your own wrapper class. Change the default text error class $form -> controls [ 'text-error' ] = 'my-error-class' ; custom_validation_messages Works in conjunction with the post () method and tells Formr to suppress the default validation messages and only show your own custom message. The following example will only display the error message: \"Please enter your email\" upon validation error of the email field. Only show custom error messages $form -> custom_validation_messages = true ; $form -> post ( 'email' , 'Email|Please enter your email' , 'valid_email' ); format_rule_dates Allows you to choose how you want to format your dates when using the before and after validation rules. Default is 'M d, Y' , Example $form -> format_rule_dates = 'Y-m-d' ; honeypot Adds a hidden \" honeypot \" field to the form, which is useful in preventing bots from hijacking the form (without the headache of a CAPTCHA) by killing the script if the field was filled. Example $form -> honeypot = 'your_email_address_here' ; Produces the following HTML < input type = \"text\" name = \"your_email_address_here\" value = \"\" style = \"display:none\" > html_purifier Formr will clean any text passed through the validate () , fastpost () , post () and get () methods using a combination of strip_tags () and FILTER_SANITIZE_SPECIAL_CHARS . However, if you want to go deeper, you can easily use HTML Purifier . Just set the full path to your HTML Purifier script and Formr will do the rest. Set the path to HTML Purifier $form -> html_purifier = '/home/mysite/htdocs/lib/HTMLPurifier.standalone.php' ; id Sets the ID of the form. You most likely will not need this as you can set the ID when creating the form, but it's here if you do. Set the form's ID $form -> id = 'MyForm' ; info_message Use this property to pass a formatted info message through the messages () method. Adding an info message $form -> info_message = 'This is an information message' ; Produces the following HTML < div class = \"alert-info\" role = \"alert\" > This is an information message </ div > You can also pass a heading to your message by adding a pipe character between the message and heading. Adding an info message with a heading $form -> info_message = 'This is an information message|Did You Know?' ; Produces the following HTML < div class = \"alert-info\" role = \"alert\" > < h4 > Did You Know? </ h4 > This is an information message </ div > inline_errors Boolean. Default is FALSE . Turns off textual error messages and, if you use the following CSS, inserts a small PNG (not included) to the right of the form field. Add an image to the right of the form field $form -> inline_errors = true ; CSS class and example code to show the \"warning\" PNG . inline-error { float : left ; width : 24 px ; height : 24 px ; background : url ( '../img/invalid.png' ) no-repeat 4 px 4 px ; } inline_errors_class Sets the CSS class name if you're using inline error reporting. Default class is named inline-error . inline_errors_class example $form -> inline_errors_class = 'my-inline-error-class' ; link_errors Boolean. This property inserts an anchor link in the error message that then links to its corresponding form field in the form, handy if you have very long forms and there's a lot of scrolling. Note: the form field's name and ID attributes must be the same for this to work. Enable linking to errors $form -> link_errors = true ; method The form's method. Formr will automatically insert < form method = \"post\" > into the < form > tag unless you set this property to something else. Typically used with fastform () . Set the form's method to GET $form -> method = 'GET' ; $form -> open (); Produces the following HTML < form action = \"/index.php\" method = \"GET\" accept-charset = \"utf-8\" > minify Boolean. Setting this to TRUE will remove all formatting and minify your output. Example $form -> minify = true ; name Sets the name of the form. You probably won't need this but it's here if you do. Setting the form's name to \"cheese\" $form -> name = 'cheese' ; Produces the following HTML < form action = \"foo.php\" name = \"cheese\" method = \"post\" accept-charset = \"utf-8\" > required Formr enables you to easily make one field required, all fields required, or all but one field required. The $form -> required property is global, which means that you don't have to mark each and every form field, form label and POST validation rule to \"required\"\u2026 instead, you supply the required field names to this property and Formr will handle everything for you automatically! You can also omit fields from being required, which can be a huge time saver because using omitted fields will automatically make all other fields in the form required! To make a field required, just add it to the $form -> required property. To make all fields required, instead of adding all field names, just add an asterisk (*). To omit fields, just wrap the omitted field name in parenthesis (). Make fname, lname, and email Required $form -> required = 'fname,lname,email' ; Make all Form Fields Required $form -> required = '*' ; Make All Form Fields Required Except for fname $form -> required = '(fname)' ; Require All Form Fields Except lname and country $form -> required = '(lname),(country)' ; required_indicator Inserts a visual representation inside the < label > tag to let the user know the field is required. You can set this to whatever you like during instantiation, or leave it at the default (empty) value. Example $form->required = 'username'; $form->required_indicator = '*'; $form->text('username','Username'); Produces the following HTML < label for = \"username\" > Username* </ label > < input type = \"text\" name = \"username\" id = \"username\" required > sanitize_html Will pass any $_POST values through PHP's FILTER_SANITIZE_SPECIAL_CHARS filter. Disabled by default. Example $form -> sanitize_html = true ; salt Add a custom salt when hashing passwords. Example $form -> salt = '12wSkie93lekLCldkx,39cjwlg0374hflwshrp' ; session Automatically puts all submitted form values into a $_SESSION array. Handy for multi-page forms or if a user submits a form and then refreshes the page. Example $form -> session = 'myForm' ; Example <? php session_start (); // give our session a name $form -> session = 'myForm' ; if ( $form -> submitted ()) { $fname = $form -> post ( 'fname' ); $lname = $form -> post ( 'lname' ); $email = $form -> post ( 'email' ); $form -> printr ( $_SESSION ); } Produces somerthing like the following Array ( [ myForm ] => Array ( [ fname ] => John [ lname ] => Wick [ email ] => johnwick @ gunfu . com ) ) Danger You must add session_start () to the top of your script, then pass the $_POST values through the fastpost () , post () or validate () methods or the $_SESSION data will not be set. session_values Boolean. Will automatically populate all form fields with that field's corresponding value in the $_SESSION . Example $form -> session_values = true ; Use the $_SESSION values for all form fields $form -> session_values = true ; Prevent the automatic use of the $_SESSION value by entering a value in the value parameter. Preventing the $_SESSION value for a field $form -> input_text ( 'lname' , 'Last name' , $lname ) Manually adding the $_SESSION value for a field $form -> input_text ( 'lname' , 'Last name' , $_SESSION [ $form -> session ][ 'lname' ]) show_valid Enabling this property will apply the valid Bootstrap or Bulma CSS classes to your fields upon form submission. Example $form -> show_valid = true ; Produces something like the following... < div id = \"_name\" class = \"form-group\" > < label class = \"control-label\" for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"form-control is-valid\" > </ div > submit The submit button's value as a string. If you don't set this Formr will automatically insert value=\"Submit\" into the submit button. You'll probably never use this, but it's here if you need it. Example $form -> submit = 'Submit Me, Jerk!' ; $form -> input_submit (); Produces the following HTML < input type = \"submit\" name = \"submit\" value = \"Submit Me, Jerk!\" id = \"submit\" > success_message Identical to $info_message except the enclosing < div > is formatted as a success message. warning_message Identical to $info_message except the enclosing < div > is formatted as a warning message. upload_dir Specifies the full path to your upload directory. Example $form -> upload_dir = '/htdocs/uploads/' ; upload_accepted_types Lets you specify the types of files you will allow for upload to your server. Enter each file extension separated by a comma. Specifying the Accepted Upload File Types $form -> upload_accepted_types = 'jpg,jpeg,gif,png' ; You can also just enter the string images and Formr will automatically allow JPG, GIF, and PNG files. $form -> upload_accepted_types = 'images' ; upload_accepted_mimes Same as upload_accepted_types but more secure. Instead of checking the file's extension it checks the file's mime type. Specifying the Accepted Upload MIME Types $form -> upload_accepted_mimes = 'image/jpg,image/jpeg,image/gif,image/png' ; You can also just enter the string images and Formr will automatically allow JPG, GIF, and PNG files. $form -> upload_accepted_mimes = 'images' ; upload_max_filesize Maximum allowed size of the uploaded file, measured in bytes. Default is 2MB. Example $form -> upload_max_filesize = 3145728 ; // 3145728 bytes = 3MB upload_rename Lets you rename the file after its been uploaded. Rename the file with a 32 character random hash $form -> upload_rename = 'hash' ; Will produce something like ZVHGgmvNGV30b2YwZ3Hx4T0xH2dNlWm4.jpg Rename the file with a 12 character hash $form -> upload_rename = 'hash[12]' ; Will produce something like 3Hx4T0YwZ3Hx.jpg Rename the file with a UNIZ timestamp $form -> upload_rename = 'timestamp' ; Will produce something like 1374967622.jpg Prepend a string onto the original filename $form -> upload_rename = 'prepend[my-file-]' ; Will produce something like my-file-our_day_at_the_beach.jpg Rename the file with a string $form -> upload_rename = 'string[myFilename]' ; Will produce myFilename.jpg upload_resize Allows you to resize your uploaded images. The required first parameter contains the max width of the resized image. The required second parameter contains the max height of the resized image. The optional third parameter adds a string to the beginning of the file name. The optional fourth parameter specifies the upload directory if one hasn't been specified in upload_dir . The optional fifth parameter contains the quality of the resized image. Default is 80%. JPG only. Resize the uploaded file to 150px x 150px $form -> upload_resize = array ( 'resize' => '150,150' ); The $upload_resize property will also accept an array as its value. The array key is the name of the process and can be anything you like, such as: \"thumbnail\", \"avatar\", \"large_image\", etc. The array values are a simple string, and tell Formr what to do with the image. Each array key/value pair will perform a resize process on the uploaded image, so if you want to resize it 10 times, just add 10 key/value pairs. Let's resize the uploaded image 3 times, for a total of 4 images; the original upload, and our three resized images. The first key will create an image with a max width and height of 600 pixels and be saved into the large directory. The second key will create an image with a max width and height of 100 pixels, will have the filename prepended with tn_ , be saved into the thumbnail directory and have a JPG quality of 90%. The third key will create an image with a max width and height of 64 pixels and be saved put it into the avatars directory. Resize images with an array $resize = [ 'large' => '600,600,,/www/formr/uploads/large/' , 'thumbnail' => '100,100,tn_,/www/formr/uploads/thumbnails/,90' , 'avatar' => '64,64,,/www/formr/uploads/avatars/' ]; $form -> upload_resize = $resize ; uploads Set this to FALSE if you're using a third-party upload script to upload your files. Example $form -> uploads = false ;","title":"Properties"},{"location":"properties/#properties","text":"This document contains a list of Formr's public properties.","title":"Properties"},{"location":"properties/#action","text":"The form's action. Formr will automatically insert the current script's filename into the < form > tag unless you set this property to something else. Typically used with fastform () . Set the form's action to login.php $form -> action = 'login.php' ; $form -> fastform ( 'login' ); Produces the following HTML < form action = \"login.php\" method = \"post\" accept-charset = \"utf-8\" > ... </ form >","title":"action"},{"location":"properties/#charset","text":"Formr's default character set is UTF-8 , however, you can easily change this to something else, such as Latin-1 . Set the form's charset to Latin-1 $form -> charset = 'Latin-1' ;","title":"charset"},{"location":"properties/#controls","text":"An array containing all of the CSS classes used in Formr, which you can easily set when instantiating a new form. You can also create your own wrappers and save them in your own wrapper class. Change the default text error class $form -> controls [ 'text-error' ] = 'my-error-class' ;","title":"controls"},{"location":"properties/#custom_validation_messages","text":"Works in conjunction with the post () method and tells Formr to suppress the default validation messages and only show your own custom message. The following example will only display the error message: \"Please enter your email\" upon validation error of the email field. Only show custom error messages $form -> custom_validation_messages = true ; $form -> post ( 'email' , 'Email|Please enter your email' , 'valid_email' );","title":"custom_validation_messages"},{"location":"properties/#format_rule_dates","text":"Allows you to choose how you want to format your dates when using the before and after validation rules. Default is 'M d, Y' , Example $form -> format_rule_dates = 'Y-m-d' ;","title":"format_rule_dates"},{"location":"properties/#honeypot","text":"Adds a hidden \" honeypot \" field to the form, which is useful in preventing bots from hijacking the form (without the headache of a CAPTCHA) by killing the script if the field was filled. Example $form -> honeypot = 'your_email_address_here' ; Produces the following HTML < input type = \"text\" name = \"your_email_address_here\" value = \"\" style = \"display:none\" >","title":"honeypot"},{"location":"properties/#html_purifier","text":"Formr will clean any text passed through the validate () , fastpost () , post () and get () methods using a combination of strip_tags () and FILTER_SANITIZE_SPECIAL_CHARS . However, if you want to go deeper, you can easily use HTML Purifier . Just set the full path to your HTML Purifier script and Formr will do the rest. Set the path to HTML Purifier $form -> html_purifier = '/home/mysite/htdocs/lib/HTMLPurifier.standalone.php' ;","title":"html_purifier"},{"location":"properties/#id","text":"Sets the ID of the form. You most likely will not need this as you can set the ID when creating the form, but it's here if you do. Set the form's ID $form -> id = 'MyForm' ;","title":"id"},{"location":"properties/#info_message","text":"Use this property to pass a formatted info message through the messages () method. Adding an info message $form -> info_message = 'This is an information message' ; Produces the following HTML < div class = \"alert-info\" role = \"alert\" > This is an information message </ div > You can also pass a heading to your message by adding a pipe character between the message and heading. Adding an info message with a heading $form -> info_message = 'This is an information message|Did You Know?' ; Produces the following HTML < div class = \"alert-info\" role = \"alert\" > < h4 > Did You Know? </ h4 > This is an information message </ div >","title":"info_message"},{"location":"properties/#inline_errors","text":"Boolean. Default is FALSE . Turns off textual error messages and, if you use the following CSS, inserts a small PNG (not included) to the right of the form field. Add an image to the right of the form field $form -> inline_errors = true ; CSS class and example code to show the \"warning\" PNG . inline-error { float : left ; width : 24 px ; height : 24 px ; background : url ( '../img/invalid.png' ) no-repeat 4 px 4 px ; }","title":"inline_errors"},{"location":"properties/#inline_errors_class","text":"Sets the CSS class name if you're using inline error reporting. Default class is named inline-error . inline_errors_class example $form -> inline_errors_class = 'my-inline-error-class' ;","title":"inline_errors_class"},{"location":"properties/#link_errors","text":"Boolean. This property inserts an anchor link in the error message that then links to its corresponding form field in the form, handy if you have very long forms and there's a lot of scrolling. Note: the form field's name and ID attributes must be the same for this to work. Enable linking to errors $form -> link_errors = true ;","title":"link_errors"},{"location":"properties/#method","text":"The form's method. Formr will automatically insert < form method = \"post\" > into the < form > tag unless you set this property to something else. Typically used with fastform () . Set the form's method to GET $form -> method = 'GET' ; $form -> open (); Produces the following HTML < form action = \"/index.php\" method = \"GET\" accept-charset = \"utf-8\" >","title":"method"},{"location":"properties/#minify","text":"Boolean. Setting this to TRUE will remove all formatting and minify your output. Example $form -> minify = true ;","title":"minify"},{"location":"properties/#name","text":"Sets the name of the form. You probably won't need this but it's here if you do. Setting the form's name to \"cheese\" $form -> name = 'cheese' ; Produces the following HTML < form action = \"foo.php\" name = \"cheese\" method = \"post\" accept-charset = \"utf-8\" >","title":"name"},{"location":"properties/#required","text":"Formr enables you to easily make one field required, all fields required, or all but one field required. The $form -> required property is global, which means that you don't have to mark each and every form field, form label and POST validation rule to \"required\"\u2026 instead, you supply the required field names to this property and Formr will handle everything for you automatically! You can also omit fields from being required, which can be a huge time saver because using omitted fields will automatically make all other fields in the form required! To make a field required, just add it to the $form -> required property. To make all fields required, instead of adding all field names, just add an asterisk (*). To omit fields, just wrap the omitted field name in parenthesis (). Make fname, lname, and email Required $form -> required = 'fname,lname,email' ; Make all Form Fields Required $form -> required = '*' ; Make All Form Fields Required Except for fname $form -> required = '(fname)' ; Require All Form Fields Except lname and country $form -> required = '(lname),(country)' ;","title":"required"},{"location":"properties/#required_indicator","text":"Inserts a visual representation inside the < label > tag to let the user know the field is required. You can set this to whatever you like during instantiation, or leave it at the default (empty) value. Example $form->required = 'username'; $form->required_indicator = '*'; $form->text('username','Username'); Produces the following HTML < label for = \"username\" > Username* </ label > < input type = \"text\" name = \"username\" id = \"username\" required >","title":"required_indicator"},{"location":"properties/#sanitize_html","text":"Will pass any $_POST values through PHP's FILTER_SANITIZE_SPECIAL_CHARS filter. Disabled by default. Example $form -> sanitize_html = true ;","title":"sanitize_html"},{"location":"properties/#salt","text":"Add a custom salt when hashing passwords. Example $form -> salt = '12wSkie93lekLCldkx,39cjwlg0374hflwshrp' ;","title":"salt"},{"location":"properties/#session","text":"Automatically puts all submitted form values into a $_SESSION array. Handy for multi-page forms or if a user submits a form and then refreshes the page. Example $form -> session = 'myForm' ; Example <? php session_start (); // give our session a name $form -> session = 'myForm' ; if ( $form -> submitted ()) { $fname = $form -> post ( 'fname' ); $lname = $form -> post ( 'lname' ); $email = $form -> post ( 'email' ); $form -> printr ( $_SESSION ); } Produces somerthing like the following Array ( [ myForm ] => Array ( [ fname ] => John [ lname ] => Wick [ email ] => johnwick @ gunfu . com ) ) Danger You must add session_start () to the top of your script, then pass the $_POST values through the fastpost () , post () or validate () methods or the $_SESSION data will not be set.","title":"session"},{"location":"properties/#session_values","text":"Boolean. Will automatically populate all form fields with that field's corresponding value in the $_SESSION . Example $form -> session_values = true ; Use the $_SESSION values for all form fields $form -> session_values = true ; Prevent the automatic use of the $_SESSION value by entering a value in the value parameter. Preventing the $_SESSION value for a field $form -> input_text ( 'lname' , 'Last name' , $lname ) Manually adding the $_SESSION value for a field $form -> input_text ( 'lname' , 'Last name' , $_SESSION [ $form -> session ][ 'lname' ])","title":"session_values"},{"location":"properties/#show_valid","text":"Enabling this property will apply the valid Bootstrap or Bulma CSS classes to your fields upon form submission. Example $form -> show_valid = true ; Produces something like the following... < div id = \"_name\" class = \"form-group\" > < label class = \"control-label\" for = \"name\" > Name </ label > < input type = \"text\" name = \"name\" id = \"name\" class = \"form-control is-valid\" > </ div >","title":"show_valid"},{"location":"properties/#submit","text":"The submit button's value as a string. If you don't set this Formr will automatically insert value=\"Submit\" into the submit button. You'll probably never use this, but it's here if you need it. Example $form -> submit = 'Submit Me, Jerk!' ; $form -> input_submit (); Produces the following HTML < input type = \"submit\" name = \"submit\" value = \"Submit Me, Jerk!\" id = \"submit\" >","title":"submit"},{"location":"properties/#success_message","text":"Identical to $info_message except the enclosing < div > is formatted as a success message.","title":"success_message"},{"location":"properties/#warning_message","text":"Identical to $info_message except the enclosing < div > is formatted as a warning message.","title":"warning_message"},{"location":"properties/#upload_dir","text":"Specifies the full path to your upload directory. Example $form -> upload_dir = '/htdocs/uploads/' ;","title":"upload_dir"},{"location":"properties/#upload_accepted_types","text":"Lets you specify the types of files you will allow for upload to your server. Enter each file extension separated by a comma. Specifying the Accepted Upload File Types $form -> upload_accepted_types = 'jpg,jpeg,gif,png' ; You can also just enter the string images and Formr will automatically allow JPG, GIF, and PNG files. $form -> upload_accepted_types = 'images' ;","title":"upload_accepted_types"},{"location":"properties/#upload_accepted_mimes","text":"Same as upload_accepted_types but more secure. Instead of checking the file's extension it checks the file's mime type. Specifying the Accepted Upload MIME Types $form -> upload_accepted_mimes = 'image/jpg,image/jpeg,image/gif,image/png' ; You can also just enter the string images and Formr will automatically allow JPG, GIF, and PNG files. $form -> upload_accepted_mimes = 'images' ;","title":"upload_accepted_mimes"},{"location":"properties/#upload_max_filesize","text":"Maximum allowed size of the uploaded file, measured in bytes. Default is 2MB. Example $form -> upload_max_filesize = 3145728 ; // 3145728 bytes = 3MB","title":"upload_max_filesize"},{"location":"properties/#upload_rename","text":"Lets you rename the file after its been uploaded. Rename the file with a 32 character random hash $form -> upload_rename = 'hash' ; Will produce something like ZVHGgmvNGV30b2YwZ3Hx4T0xH2dNlWm4.jpg Rename the file with a 12 character hash $form -> upload_rename = 'hash[12]' ; Will produce something like 3Hx4T0YwZ3Hx.jpg Rename the file with a UNIZ timestamp $form -> upload_rename = 'timestamp' ; Will produce something like 1374967622.jpg Prepend a string onto the original filename $form -> upload_rename = 'prepend[my-file-]' ; Will produce something like my-file-our_day_at_the_beach.jpg Rename the file with a string $form -> upload_rename = 'string[myFilename]' ; Will produce myFilename.jpg","title":"upload_rename"},{"location":"properties/#upload_resize","text":"Allows you to resize your uploaded images. The required first parameter contains the max width of the resized image. The required second parameter contains the max height of the resized image. The optional third parameter adds a string to the beginning of the file name. The optional fourth parameter specifies the upload directory if one hasn't been specified in upload_dir . The optional fifth parameter contains the quality of the resized image. Default is 80%. JPG only. Resize the uploaded file to 150px x 150px $form -> upload_resize = array ( 'resize' => '150,150' ); The $upload_resize property will also accept an array as its value. The array key is the name of the process and can be anything you like, such as: \"thumbnail\", \"avatar\", \"large_image\", etc. The array values are a simple string, and tell Formr what to do with the image. Each array key/value pair will perform a resize process on the uploaded image, so if you want to resize it 10 times, just add 10 key/value pairs. Let's resize the uploaded image 3 times, for a total of 4 images; the original upload, and our three resized images. The first key will create an image with a max width and height of 600 pixels and be saved into the large directory. The second key will create an image with a max width and height of 100 pixels, will have the filename prepended with tn_ , be saved into the thumbnail directory and have a JPG quality of 90%. The third key will create an image with a max width and height of 64 pixels and be saved put it into the avatars directory. Resize images with an array $resize = [ 'large' => '600,600,,/www/formr/uploads/large/' , 'thumbnail' => '100,100,tn_,/www/formr/uploads/thumbnails/,90' , 'avatar' => '64,64,,/www/formr/uploads/avatars/' ]; $form -> upload_resize = $resize ;","title":"upload_resize"},{"location":"properties/#uploads","text":"Set this to FALSE if you're using a third-party upload script to upload your files. Example $form -> uploads = false ;","title":"uploads"},{"location":"upload-files/","text":"Uploading Files This document provides methods and examples for uploading files with Formr. Formr's method of uploading and resizing files is fairly simplistic: Formr will provide basic security in renaming uploaded file names - by stripping out anything that's not a letter, number or underscore - and allows for the checking of mime types and/or file extensions. Using Another Script for File Uploads File uploads with Formr may satisfy most people's uploading needs, however, if your file operations are more complex I suggest you disable file uploads and use the excellent class.upload.php by Colin Verot. Disabling upload processing will still let you use Formr to build your input fields, it just won't upload and process the files. To stop Formr from uploading your files, just set the uploads property to FALSE . $form -> uploads = FALSE ; Security Check We don't want our visitors uploading PDF or Word documents; only photos. So let's perform a security check and make sure only images are being uploaded. We can easily do this with the $upload_accepted_mimes property, which will check the mime type of the uploaded file and make sure it's either a GIF, JPG, or PNG file. $form -> upload_accepted_mimes = 'images' ; We can also specify our mime types individually... $form -> upload_accepted_mimes = 'image/jpg,image/jpeg,image/gif,image/png' ; Define the Upload Directory This next step is to tell Formr where we want to upload our files, which we do with the $upload_dir property. $form -> upload_dir = '/srv/www/uploads' ; Rename the Upload Let's go ahead and rename our uploaded image to the current time of day with the $upload_rename property. $form -> upload_rename = 'timestamp' ; Create a Thumbnail More often than not we want to show a smaller version of the uploaded image on a preview page, or as an avatar. This is easily accomplished using the $upload_resize property, where we can specify the width and height of the thumbnail, prepend a string onto the filename, specify where it should be saved, plus the amount of compression that should be used when saving. The following will generate a 100px x 100px image, prepend the filename with tn_ , save it into the uploads directory, and use 90% compression when saving. Example php $form->upload_resize = [ 'tn' => '100,100,tn_,/srv/www/uploads,90' ]; Produces something like tn_1603725041.jpg Full Upload Example A Complete Upload Example <? php require 'Formr/class.formr.php' ; // instantiate Formr $form = new Formr\\Formr (); // only allow images to be uploaded $form -> upload_accepted_mimes = 'images' ; // define our upload directory $form -> upload_dir = '/srv/www/uploads' ; // rename our upload with a 32-character hash $form -> upload_rename = 'hash' ; // create a thumbnail $form -> upload_resize = [ 'thumbnail' => '100,100,tn_,' . $form -> upload_dir . ',90' , ]; // check if the form has been submitted if ( $form -> submitted ()) { // process the upload and put it into an array $file = $form -> post ( 'file' ); // printr() the array to see its keys/values $form -> printr ( $file ); } ?> <div class=\"container\"> <?php // always print Formr's messages! $form -> messages (); // open our form element $form -> open_multipart (); // add our file element $form -> file ( 'file' ); // submit button $form -> submit_button (); //close the form $form -> close (); ?> </div>","title":"Upload Files"},{"location":"upload-files/#uploading-files","text":"This document provides methods and examples for uploading files with Formr. Formr's method of uploading and resizing files is fairly simplistic: Formr will provide basic security in renaming uploaded file names - by stripping out anything that's not a letter, number or underscore - and allows for the checking of mime types and/or file extensions. Using Another Script for File Uploads File uploads with Formr may satisfy most people's uploading needs, however, if your file operations are more complex I suggest you disable file uploads and use the excellent class.upload.php by Colin Verot. Disabling upload processing will still let you use Formr to build your input fields, it just won't upload and process the files. To stop Formr from uploading your files, just set the uploads property to FALSE . $form -> uploads = FALSE ;","title":"Uploading Files"},{"location":"upload-files/#security-check","text":"We don't want our visitors uploading PDF or Word documents; only photos. So let's perform a security check and make sure only images are being uploaded. We can easily do this with the $upload_accepted_mimes property, which will check the mime type of the uploaded file and make sure it's either a GIF, JPG, or PNG file. $form -> upload_accepted_mimes = 'images' ; We can also specify our mime types individually... $form -> upload_accepted_mimes = 'image/jpg,image/jpeg,image/gif,image/png' ;","title":"Security Check"},{"location":"upload-files/#define-the-upload-directory","text":"This next step is to tell Formr where we want to upload our files, which we do with the $upload_dir property. $form -> upload_dir = '/srv/www/uploads' ;","title":"Define the Upload Directory"},{"location":"upload-files/#rename-the-upload","text":"Let's go ahead and rename our uploaded image to the current time of day with the $upload_rename property. $form -> upload_rename = 'timestamp' ;","title":"Rename the Upload"},{"location":"upload-files/#create-a-thumbnail","text":"More often than not we want to show a smaller version of the uploaded image on a preview page, or as an avatar. This is easily accomplished using the $upload_resize property, where we can specify the width and height of the thumbnail, prepend a string onto the filename, specify where it should be saved, plus the amount of compression that should be used when saving. The following will generate a 100px x 100px image, prepend the filename with tn_ , save it into the uploads directory, and use 90% compression when saving. Example php $form->upload_resize = [ 'tn' => '100,100,tn_,/srv/www/uploads,90' ]; Produces something like tn_1603725041.jpg","title":"Create a Thumbnail"},{"location":"upload-files/#full-upload-example","text":"A Complete Upload Example <? php require 'Formr/class.formr.php' ; // instantiate Formr $form = new Formr\\Formr (); // only allow images to be uploaded $form -> upload_accepted_mimes = 'images' ; // define our upload directory $form -> upload_dir = '/srv/www/uploads' ; // rename our upload with a 32-character hash $form -> upload_rename = 'hash' ; // create a thumbnail $form -> upload_resize = [ 'thumbnail' => '100,100,tn_,' . $form -> upload_dir . ',90' , ]; // check if the form has been submitted if ( $form -> submitted ()) { // process the upload and put it into an array $file = $form -> post ( 'file' ); // printr() the array to see its keys/values $form -> printr ( $file ); } ?> <div class=\"container\"> <?php // always print Formr's messages! $form -> messages (); // open our form element $form -> open_multipart (); // add our file element $form -> file ( 'file' ); // submit button $form -> submit_button (); //close the form $form -> close (); ?> </div>","title":"Full Upload Example"},{"location":"validation/","text":"Validation This document contains examples of Formr's form validation methods and rules. Retrieving Form Input validate The easiest, and most basic way to validate a form. Simply add a comma separated list of your form's labels and Formr will grab all of the form data, perform basic sanitization on it, validate it according to your rules, and put the values into an array. The only parameter accepts a comma delimited string of form labels and their associated validation rules, wrapped in parentheses, and is required. Retrieve the form's values $data = $form -> validate ( 'Name, Email Address, Comments, Age' ); $name = $data [ 'name' ]; $email = $data [ 'email_address' ]; $comments = $data [ 'comments' ]; $age = $data [ 'age' ]; Warning Notice how our label is named Email Address and our form field is named email_address ? This is because Formr will take any spaces in the labels and convert them to an underscore. In order to perform validation, just add your rules in parentheses after the label. If a label contains the word email , a valid_email validation rule will automatically be applied. Validate the form's values $data = $form -> validate ( 'Name(min[2]|max[32]), Email Address, Comments, Age(greater_than[17])' ); Tip You can add as many validation rules as you like by separating each rule with a pipe | character. fastpost This method works in conjunction with fastform () and is covered in detail on the FastForm Examples page. post This method processes and validates form input based upon a series of chained rules, and allows for the most control over your validation. The required first parameter contains the field name. The optional second parameter contains human readable text for messages. The optional third parameter contains the validation rules. Info The second parameter will be used for error messages if that field fails validation. It can optionally contain a custom error message string that will be shown if the field is required, yet left empty when submitted. Info The form data is passed through PHP's trim () and strip_tags () functions for basic sanitation. If you want to allow HTML in your forms, just add allow_html as a validation rule and only trim () will be applied to the input. Process form input and assign to variables $name = $form -> post ( 'name' ); $email = $form -> post ( 'email' ); Password is no less than 6 characters and no more than 20 $password = $form -> post ( 'password' , 'Password' , 'min[6]|max[20]' ); Make sure 'password_conf' matches 'password' $password_conf = $form -> post ( 'password_conf' , 'Password Confirm' , 'matches[password]' ); You can assign a human readable version of the field name in the second parameter for better error messages. Make sure we get a valid email address $email = $form -> post ( 'email' , 'Email' , 'valid_email' ); You can create custom error message by adding a pipe character after the name of the form field. Create a custom error message string $email = $form -> post ( 'email' , 'Email|Please enter your email address' , 'valid_email' ); Validation Rules The following table contains all validation rules. Rule Parameter? Description Example after No Checks if the given date is after the current date using server time. Input must be formatted as YYYY-MM-DD . allow_html No Allows HTML, script tags, etc. Nullifies all other string rules. Use with caution! alpha No Returns FALSE if the given string contains anything other than alphabetical characters. alpha_dash No Returns FALSE if the given string contains anything other than alpha-numeric characters, underscores or dashes. alpha_numeric No Returns FALSE if the given string contains anything other than alpha-numeric characters. before No Checks if the given date is before the current date using server time. Input must be formatted as YYYY-MM-DD . exact Yes Returns FALSE if the given string is not exactly the parameter value. exact[8] greater_than Yes Returns FALSE if the given string is less than the parameter value, or is not numeric. gt[8] greater_than_or_equal Yes Returns FALSE if the given string is less than or equal to the parameter value, or is not numeric. gte[8] hash No Returns an encrypted string using the password_hash function. int No Returns FALSE if the given string contains anything other than an integer. less_than Yes Returns FALSE if the given string is greater than the parameter value or not numeric. lt[8] less_than_or_equal Yes Returns FALSE if the given string is greater than or equal to the parameter value, or is not numeric. lte[8] matches Yes Returns FALSE if the given string does not match the one in the parameter. matches[field_name] max Yes Returns FALSE if the given string is longer then the parameter value. max[12] min Yes Returns FALSE if the given string is shorter then the parameter value. min[6] md5 No Returns an md5 encrypted string. not_regex Yes Does not match a user-defined regex. not_regex[/^\\d+$/] numeric No Returns FALSE if the given string contains anything other than numeric characters. regex Yes Matches a user-defined regex. regex[/[^0-9]/] sha1 No Returns an sha1 encrypted string. sanitize_email No Passes result through the FILTER_SANITIZE_EMAIL function. sanitize_int No Passes result through the FILTER_SANITIZE_NUMBER_INT function. sanitize_string No Passes result through the FILTER_SANITIZE_STRING function. sanitize_url No Passes result through the FILTER_SANITIZE_URL function. slug No Creates a Twitter-style username string containing only letters, numbers and underscores. strip_numeric No Strips out everything but numbers. valid_email No Returns FALSE if the supplied string does not contain a valid email address. valid_ip No Returns FALSE if the supplied string is not a valid IP address. valid_url No Returns FALSE if the supplied string is not formatted as a URL","title":"Validation"},{"location":"validation/#validation","text":"This document contains examples of Formr's form validation methods and rules.","title":"Validation"},{"location":"validation/#retrieving-form-input","text":"","title":"Retrieving Form Input"},{"location":"validation/#validate","text":"The easiest, and most basic way to validate a form. Simply add a comma separated list of your form's labels and Formr will grab all of the form data, perform basic sanitization on it, validate it according to your rules, and put the values into an array. The only parameter accepts a comma delimited string of form labels and their associated validation rules, wrapped in parentheses, and is required. Retrieve the form's values $data = $form -> validate ( 'Name, Email Address, Comments, Age' ); $name = $data [ 'name' ]; $email = $data [ 'email_address' ]; $comments = $data [ 'comments' ]; $age = $data [ 'age' ]; Warning Notice how our label is named Email Address and our form field is named email_address ? This is because Formr will take any spaces in the labels and convert them to an underscore. In order to perform validation, just add your rules in parentheses after the label. If a label contains the word email , a valid_email validation rule will automatically be applied. Validate the form's values $data = $form -> validate ( 'Name(min[2]|max[32]), Email Address, Comments, Age(greater_than[17])' ); Tip You can add as many validation rules as you like by separating each rule with a pipe | character.","title":"validate"},{"location":"validation/#fastpost","text":"This method works in conjunction with fastform () and is covered in detail on the FastForm Examples page.","title":"fastpost"},{"location":"validation/#post","text":"This method processes and validates form input based upon a series of chained rules, and allows for the most control over your validation. The required first parameter contains the field name. The optional second parameter contains human readable text for messages. The optional third parameter contains the validation rules. Info The second parameter will be used for error messages if that field fails validation. It can optionally contain a custom error message string that will be shown if the field is required, yet left empty when submitted. Info The form data is passed through PHP's trim () and strip_tags () functions for basic sanitation. If you want to allow HTML in your forms, just add allow_html as a validation rule and only trim () will be applied to the input. Process form input and assign to variables $name = $form -> post ( 'name' ); $email = $form -> post ( 'email' ); Password is no less than 6 characters and no more than 20 $password = $form -> post ( 'password' , 'Password' , 'min[6]|max[20]' ); Make sure 'password_conf' matches 'password' $password_conf = $form -> post ( 'password_conf' , 'Password Confirm' , 'matches[password]' ); You can assign a human readable version of the field name in the second parameter for better error messages. Make sure we get a valid email address $email = $form -> post ( 'email' , 'Email' , 'valid_email' ); You can create custom error message by adding a pipe character after the name of the form field. Create a custom error message string $email = $form -> post ( 'email' , 'Email|Please enter your email address' , 'valid_email' );","title":"post"},{"location":"validation/#validation-rules","text":"The following table contains all validation rules. Rule Parameter? Description Example after No Checks if the given date is after the current date using server time. Input must be formatted as YYYY-MM-DD . allow_html No Allows HTML, script tags, etc. Nullifies all other string rules. Use with caution! alpha No Returns FALSE if the given string contains anything other than alphabetical characters. alpha_dash No Returns FALSE if the given string contains anything other than alpha-numeric characters, underscores or dashes. alpha_numeric No Returns FALSE if the given string contains anything other than alpha-numeric characters. before No Checks if the given date is before the current date using server time. Input must be formatted as YYYY-MM-DD . exact Yes Returns FALSE if the given string is not exactly the parameter value. exact[8] greater_than Yes Returns FALSE if the given string is less than the parameter value, or is not numeric. gt[8] greater_than_or_equal Yes Returns FALSE if the given string is less than or equal to the parameter value, or is not numeric. gte[8] hash No Returns an encrypted string using the password_hash function. int No Returns FALSE if the given string contains anything other than an integer. less_than Yes Returns FALSE if the given string is greater than the parameter value or not numeric. lt[8] less_than_or_equal Yes Returns FALSE if the given string is greater than or equal to the parameter value, or is not numeric. lte[8] matches Yes Returns FALSE if the given string does not match the one in the parameter. matches[field_name] max Yes Returns FALSE if the given string is longer then the parameter value. max[12] min Yes Returns FALSE if the given string is shorter then the parameter value. min[6] md5 No Returns an md5 encrypted string. not_regex Yes Does not match a user-defined regex. not_regex[/^\\d+$/] numeric No Returns FALSE if the given string contains anything other than numeric characters. regex Yes Matches a user-defined regex. regex[/[^0-9]/] sha1 No Returns an sha1 encrypted string. sanitize_email No Passes result through the FILTER_SANITIZE_EMAIL function. sanitize_int No Passes result through the FILTER_SANITIZE_NUMBER_INT function. sanitize_string No Passes result through the FILTER_SANITIZE_STRING function. sanitize_url No Passes result through the FILTER_SANITIZE_URL function. slug No Creates a Twitter-style username string containing only letters, numbers and underscores. strip_numeric No Strips out everything but numbers. valid_email No Returns FALSE if the supplied string does not contain a valid email address. valid_ip No Returns FALSE if the supplied string is not a valid IP address. valid_url No Returns FALSE if the supplied string is not formatted as a URL","title":"Validation Rules"},{"location":"blog/fastform-in-the-real-world/","text":"FastForm in the Real World One of my favorite things about Formr is the ability to save form/validation sets for reuse using FastForm . I can't even count the number of times I've had to create a registration form and all I had to type was... $form -> fastform ( 'registration' ); ...and, BLAMMO! Out pops a registration form, ready to go! And then to process and validate it I just type\u2026 $post = $form -> fastpost ( 'registration' ); ...and KAPOW! My registration form is now enabled for server-side validation, complete with verifying the email address and matching and hashing the password! Plus, all of my $_POST data is available for me in the $post variable, so if I want the username I just do... $username = $post [ 'username' ]; In fact, this is pretty much what my registration forms now look like from a PHP standpoint. <? php require 'vendor/autoload.php' ; $form = new Formr\\Formr ( 'bootstrap' ); if ( $form -> submitted ()) { $form -> required = '*' ; $post = $form -> fastpost ( 'registration' ); if ( ! $form -> errors ()) { $session -> process_registration ( $post ); } } $form -> messages (); $form -> fastform ( 'registration' ); ?> Seriously, can it not get any easier than that? I do the exact same thing for a login form and a contact form. This alone saves me hours, if not days, in development time. The FastForms are readily available in lib/class.forms.php , and if I want to modify them I just copy one and paste it into my_classes/my.forms.php , give it a new name and enter that as the FastForm argument; it's now ready and willing any time I need it. Check out the Formr Extend repo for more information on creating and saving your own FastForms!","title":"FastForm in the Real World"},{"location":"blog/fastform-in-the-real-world/#fastform-in-the-real-world","text":"One of my favorite things about Formr is the ability to save form/validation sets for reuse using FastForm . I can't even count the number of times I've had to create a registration form and all I had to type was... $form -> fastform ( 'registration' ); ...and, BLAMMO! Out pops a registration form, ready to go! And then to process and validate it I just type\u2026 $post = $form -> fastpost ( 'registration' ); ...and KAPOW! My registration form is now enabled for server-side validation, complete with verifying the email address and matching and hashing the password! Plus, all of my $_POST data is available for me in the $post variable, so if I want the username I just do... $username = $post [ 'username' ]; In fact, this is pretty much what my registration forms now look like from a PHP standpoint. <? php require 'vendor/autoload.php' ; $form = new Formr\\Formr ( 'bootstrap' ); if ( $form -> submitted ()) { $form -> required = '*' ; $post = $form -> fastpost ( 'registration' ); if ( ! $form -> errors ()) { $session -> process_registration ( $post ); } } $form -> messages (); $form -> fastform ( 'registration' ); ?> Seriously, can it not get any easier than that? I do the exact same thing for a login form and a contact form. This alone saves me hours, if not days, in development time. The FastForms are readily available in lib/class.forms.php , and if I want to modify them I just copy one and paste it into my_classes/my.forms.php , give it a new name and enter that as the FastForm argument; it's now ready and willing any time I need it. Check out the Formr Extend repo for more information on creating and saving your own FastForms!","title":"FastForm in the Real World"},{"location":"blog/formr-for-designers/","text":"Formr for Designers Formr is a PHP micro framework which allows developers to easily build forms; but what if you're not a PHP developer? What if you don't even know PHP? No problem, Formr has you covered! Installation The first step is to download Formr from GitHub , unzip it and drag the Formr folder into your site's folder, then copy the following code and paste it into your PHP form script. <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); ?> That's it; Formr is now installed and ready to go to work! Building a Form Build your form in HTML like you normally would, and when you come to your form element's value attribute you'll enter a small snippet of PHP that will allow Formr to do the heavy lifting with Formr's value() function. $form -> value ( 'the_fieldname_goes_here' ); Your form will now look something like this: < input type = \"text\" name = \"name\" value = \"<?php $form->value('name'); ?>\" > < input type = \"email\" name = \"email\" value = \"<?php $form->value('email'); ?>\" > When your visitor submits the form and there's an error, the information will be displayed in the field so they won't have to retype and fill out the whole form again. Processing the Form Once your visitor clicks the Submit button you need to process the form information and do something with it, which usually involves typing lots of code to validate the information, plus sending an email or putting something in a database. This is really easy with Formr. First thing we do is check if the form has been submitted with the submitted() function. if ( $form -> submitted ()) { // the form has been submitted } Next, we process and validate our form fields. An easy way to do this is to use Formr's fastpost() function, and let it do all the work for us. We'll take all of the form fields and put them into an array and name it $post . $post = $form -> fastpost ( 'POST' ); This will process every field in your form and put it into that $post array for later use. Granted, it's not incredibly flexible and won't perform strict validation on every field, but it will clean all input (making it safe) and will validate email addresses, among a few other things. So now our script looks like this: if ( $form -> submitted ()) { $post = $form -> fastpost ( 'POST' ); $name = $post [ 'name' ]; $email = $post [ 'email' ]; } Checking for Errors If you've made some form fields required - and the visitor didn't fill them out - Formr will let them know via error messages, but first you must tell Formr which fields are required and where to display the error messages. To make fields required we use the $required variable. Just enter a comma separated list of the required field names. If you want to make all fields required, just enter an asterisk (*) instead. $form -> required = 'name,email' ; To display error messages, we use the messages() function. $form -> messages () This can appear anywhere in your layout, as along as it's after where you check if the form has been submitted. Sending Email Our form has been processed and no errors are found; now what? Let's email the results to our client! Since we're doing a simple email, let's iust skip that $post array we created earlier and just send them right from inside Formr's send_email() function! <? php if ( $form -> submitted ()) { if ( ! $form -> errors ()) { $to = 'client@email.com' ; $subject = 'Form Submission' ; $from = 'donotreply@domain.com' ; $form -> send_email ( $to , $subject , 'POST' , $from ); } } ?> Our Final File <!DOCTYPE html> < html lang = \"en\" > < body > <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); $form -> required = '*' ; if ( $form -> submitted ()) { if ( ! $form -> errors ()) { $to = 'client@email.com' ; $subject = 'Form Submission' ; $from = 'donotreply@domain.com' ; if ( $form -> send_email ( $to , $subject , 'POST' , $from )) { $form -> success_message = 'Email Sent!' ; } } } $form -> messages (); ?> < form action = \"form.php\" method = \"post\" > < input type = \"text\" name = \"name\" value = \"<?php $form->value('name'); ?>\" >< br > < input type = \"email\" name = \"email\" value = \"<?php $form->value('email'); ?>\" >< br > < button type = \"submit\" name = \"submit\" > Submit Form </ button > </ form > </ body > </ html >","title":"Formr for Designers"},{"location":"blog/formr-for-designers/#formr-for-designers","text":"Formr is a PHP micro framework which allows developers to easily build forms; but what if you're not a PHP developer? What if you don't even know PHP? No problem, Formr has you covered!","title":"Formr for Designers"},{"location":"blog/formr-for-designers/#installation","text":"The first step is to download Formr from GitHub , unzip it and drag the Formr folder into your site's folder, then copy the following code and paste it into your PHP form script. <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); ?> That's it; Formr is now installed and ready to go to work!","title":"Installation"},{"location":"blog/formr-for-designers/#building-a-form","text":"Build your form in HTML like you normally would, and when you come to your form element's value attribute you'll enter a small snippet of PHP that will allow Formr to do the heavy lifting with Formr's value() function. $form -> value ( 'the_fieldname_goes_here' ); Your form will now look something like this: < input type = \"text\" name = \"name\" value = \"<?php $form->value('name'); ?>\" > < input type = \"email\" name = \"email\" value = \"<?php $form->value('email'); ?>\" > When your visitor submits the form and there's an error, the information will be displayed in the field so they won't have to retype and fill out the whole form again.","title":"Building a Form"},{"location":"blog/formr-for-designers/#processing-the-form","text":"Once your visitor clicks the Submit button you need to process the form information and do something with it, which usually involves typing lots of code to validate the information, plus sending an email or putting something in a database. This is really easy with Formr. First thing we do is check if the form has been submitted with the submitted() function. if ( $form -> submitted ()) { // the form has been submitted } Next, we process and validate our form fields. An easy way to do this is to use Formr's fastpost() function, and let it do all the work for us. We'll take all of the form fields and put them into an array and name it $post . $post = $form -> fastpost ( 'POST' ); This will process every field in your form and put it into that $post array for later use. Granted, it's not incredibly flexible and won't perform strict validation on every field, but it will clean all input (making it safe) and will validate email addresses, among a few other things. So now our script looks like this: if ( $form -> submitted ()) { $post = $form -> fastpost ( 'POST' ); $name = $post [ 'name' ]; $email = $post [ 'email' ]; }","title":"Processing the Form"},{"location":"blog/formr-for-designers/#checking-for-errors","text":"If you've made some form fields required - and the visitor didn't fill them out - Formr will let them know via error messages, but first you must tell Formr which fields are required and where to display the error messages. To make fields required we use the $required variable. Just enter a comma separated list of the required field names. If you want to make all fields required, just enter an asterisk (*) instead. $form -> required = 'name,email' ; To display error messages, we use the messages() function. $form -> messages () This can appear anywhere in your layout, as along as it's after where you check if the form has been submitted.","title":"Checking for Errors"},{"location":"blog/formr-for-designers/#sending-email","text":"Our form has been processed and no errors are found; now what? Let's email the results to our client! Since we're doing a simple email, let's iust skip that $post array we created earlier and just send them right from inside Formr's send_email() function! <? php if ( $form -> submitted ()) { if ( ! $form -> errors ()) { $to = 'client@email.com' ; $subject = 'Form Submission' ; $from = 'donotreply@domain.com' ; $form -> send_email ( $to , $subject , 'POST' , $from ); } } ?>","title":"Sending Email"},{"location":"blog/formr-for-designers/#our-final-file","text":"<!DOCTYPE html> < html lang = \"en\" > < body > <? php require 'Formr/class.formr.php' ; $form = new Formr\\Formr (); $form -> required = '*' ; if ( $form -> submitted ()) { if ( ! $form -> errors ()) { $to = 'client@email.com' ; $subject = 'Form Submission' ; $from = 'donotreply@domain.com' ; if ( $form -> send_email ( $to , $subject , 'POST' , $from )) { $form -> success_message = 'Email Sent!' ; } } } $form -> messages (); ?> < form action = \"form.php\" method = \"post\" > < input type = \"text\" name = \"name\" value = \"<?php $form->value('name'); ?>\" >< br > < input type = \"email\" name = \"email\" value = \"<?php $form->value('email'); ?>\" >< br > < button type = \"submit\" name = \"submit\" > Submit Form </ button > </ form > </ body > </ html >","title":"Our Final File"}]}